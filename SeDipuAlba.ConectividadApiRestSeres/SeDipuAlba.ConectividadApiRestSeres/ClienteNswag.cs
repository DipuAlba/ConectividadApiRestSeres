//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8600 // Disable "CS8600 Converting null literal or possible null value to non-nullable type"
#pragma warning disable 8602 // Disable "CS8602 Dereference of a possibly null reference"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace ClienteNswag
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Client
    {
#pragma warning disable 8618
        private string _baseUrl;
#pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public Client(System.Net.Http.HttpClient httpClient)
#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://pre-26071.sedipualba.es/seres";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Devuelve los datos del ciudadano indicado por el identificador
        /// </summary>
        /// <param name="ciudadanoId">Identificador ciudadano</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CiudadanoEditViewModel> ApiCiudadanos_GetCiudadanoByIdAsync(int ciudadanoId)
        {
            return ApiCiudadanos_GetCiudadanoByIdAsync(ciudadanoId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Devuelve los datos del ciudadano indicado por el identificador
        /// </summary>
        /// <param name="ciudadanoId">Identificador ciudadano</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CiudadanoEditViewModel> ApiCiudadanos_GetCiudadanoByIdAsync(int ciudadanoId, System.Threading.CancellationToken cancellationToken)
        {
            if (ciudadanoId == null)
                throw new System.ArgumentNullException("ciudadanoId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/ciudadanos/getById/{ciudadanoId}"
                    urlBuilder_.Append("api/ciudadanos/getById/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(ciudadanoId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CiudadanoEditViewModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Devuelve los datos del primer ciudadano encontrado por documento (NIF, CIF, etc.)
        /// </summary>
        /// <param name="documento">Documento del ciudadano</param>
        /// <param name="dir3">Dir3 del ciudadano. Sólo válido para entidades públicas que comparten el mismo NIF (opcional)</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CiudadanoEditViewModel> ApiCiudadanos_GetCiudadanoByDocumentoAsync(string documento, string dir3)
        {
            return ApiCiudadanos_GetCiudadanoByDocumentoAsync(documento, dir3, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Devuelve los datos del primer ciudadano encontrado por documento (NIF, CIF, etc.)
        /// </summary>
        /// <param name="documento">Documento del ciudadano</param>
        /// <param name="dir3">Dir3 del ciudadano. Sólo válido para entidades públicas que comparten el mismo NIF (opcional)</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CiudadanoEditViewModel> ApiCiudadanos_GetCiudadanoByDocumentoAsync(string documento, string dir3, System.Threading.CancellationToken cancellationToken)
        {
            if (documento == null)
                throw new System.ArgumentNullException("documento");

            if (dir3 == null)
                throw new System.ArgumentNullException("dir3");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/ciudadanos/getByDocumento/{documento}"
                    urlBuilder_.Append("api/ciudadanos/getByDocumento/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(documento, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("dir3")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(dir3, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CiudadanoEditViewModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Devuelve una lista de ciudadanos basada en el nombre o parte del nombre.
        /// </summary>
        /// <param name="filtro">Texto de filtro para la búsqueda por nombre, debe tener al menos 3 caracteres</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CiudadanoViewModel>> ApiCiudadanos_ListCiudadanosByNameAsync(string filtro, TipoPersonalidad? tipoPersonalidad)
        {
            return ApiCiudadanos_ListCiudadanosByNameAsync(filtro, tipoPersonalidad, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Devuelve una lista de ciudadanos basada en el nombre o parte del nombre.
        /// </summary>
        /// <param name="filtro">Texto de filtro para la búsqueda por nombre, debe tener al menos 3 caracteres</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CiudadanoViewModel>> ApiCiudadanos_ListCiudadanosByNameAsync(string filtro, TipoPersonalidad? tipoPersonalidad, System.Threading.CancellationToken cancellationToken)
        {
            if (filtro == null)
                throw new System.ArgumentNullException("filtro");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/ciudadanos/listByName"
                    urlBuilder_.Append("api/ciudadanos/listByName");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("filtro")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filtro, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (tipoPersonalidad != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tipoPersonalidad")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tipoPersonalidad, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CiudadanoViewModel>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Devuelve los datos de los ciudadanos basándose en el NIF/CIF/NIE proporcionado.
        /// </summary>
        /// <param name="documento">El documento (NIF, CIF, NIE) del ciudadano a buscar.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CiudadanoEditViewModel>> ApiCiudadanos_GetCiudadanosByDocumentoAsync(string documento)
        {
            return ApiCiudadanos_GetCiudadanosByDocumentoAsync(documento, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Devuelve los datos de los ciudadanos basándose en el NIF/CIF/NIE proporcionado.
        /// </summary>
        /// <param name="documento">El documento (NIF, CIF, NIE) del ciudadano a buscar.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CiudadanoEditViewModel>> ApiCiudadanos_GetCiudadanosByDocumentoAsync(string documento, System.Threading.CancellationToken cancellationToken)
        {
            if (documento == null)
                throw new System.ArgumentNullException("documento");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/ciudadanos/filterByDocumento/{documento}"
                    urlBuilder_.Append("api/ciudadanos/filterByDocumento/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(documento, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CiudadanoEditViewModel>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Devuelve los datos de contacto completos de un ciudadano especificado por su Identificador. Solo para uso interno.
        /// </summary>
        /// <param name="id">Identificador del ciudadano.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ContactosCompletosCiudadanoDto> ApiCiudadanos_GetContactosCiudadanoByIdAsync(int id)
        {
            return ApiCiudadanos_GetContactosCiudadanoByIdAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Devuelve los datos de contacto completos de un ciudadano especificado por su Identificador. Solo para uso interno.
        /// </summary>
        /// <param name="id">Identificador del ciudadano.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ContactosCompletosCiudadanoDto> ApiCiudadanos_GetContactosCiudadanoByIdAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/ciudadanos/getContactosById/{id}"
                    urlBuilder_.Append("api/ciudadanos/getContactosById/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContactosCompletosCiudadanoDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Devuelve una lista de identificadores y documentos de identidad de los ciudadanos que hayan sido modificados desde la fecha especificada hasta hoy.
        /// </summary>
        /// <param name="fechaDesde">Fecha desde la cual se buscan las modificaciones. Debe estar en formato ISO 8601 (YYYY-MM-DD).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<IdDocumentoDto>> ApiCiudadanos_ListCiudadanosModificadosAsync(System.DateTimeOffset fechaDesde)
        {
            return ApiCiudadanos_ListCiudadanosModificadosAsync(fechaDesde, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Devuelve una lista de identificadores y documentos de identidad de los ciudadanos que hayan sido modificados desde la fecha especificada hasta hoy.
        /// </summary>
        /// <param name="fechaDesde">Fecha desde la cual se buscan las modificaciones. Debe estar en formato ISO 8601 (YYYY-MM-DD).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<IdDocumentoDto>> ApiCiudadanos_ListCiudadanosModificadosAsync(System.DateTimeOffset fechaDesde, System.Threading.CancellationToken cancellationToken)
        {
            if (fechaDesde == null)
                throw new System.ArgumentNullException("fechaDesde");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/ciudadanos/listModificados/{fechaDesde}"
                    urlBuilder_.Append("api/ciudadanos/listModificados/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(fechaDesde.ToString("s", System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<IdDocumentoDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Permite eliminar un elemento (teléfono, email, DEH, domicilio) de un ciudadano.
        /// </summary>
        /// <param name="tipoElemento">Tipo de elemento a eliminar (Domicilio (1), Telefono (2), Correo electrónico (3), DEH (4)).</param>
        /// <param name="idCiudadano">Identificador único del ciudadano.</param>
        /// <param name="idElemento">Identificador único del elemento a eliminar.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CiudadanoDto> ApiCiudadanos_RemoveElementoCiudadanoAsync(TipoElemento tipoElemento, int idCiudadano, int idElemento)
        {
            return ApiCiudadanos_RemoveElementoCiudadanoAsync(tipoElemento, idCiudadano, idElemento, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Permite eliminar un elemento (teléfono, email, DEH, domicilio) de un ciudadano.
        /// </summary>
        /// <param name="tipoElemento">Tipo de elemento a eliminar (Domicilio (1), Telefono (2), Correo electrónico (3), DEH (4)).</param>
        /// <param name="idCiudadano">Identificador único del ciudadano.</param>
        /// <param name="idElemento">Identificador único del elemento a eliminar.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CiudadanoDto> ApiCiudadanos_RemoveElementoCiudadanoAsync(TipoElemento tipoElemento, int idCiudadano, int idElemento, System.Threading.CancellationToken cancellationToken)
        {
            if (tipoElemento == null)
                throw new System.ArgumentNullException("tipoElemento");

            if (idCiudadano == null)
                throw new System.ArgumentNullException("idCiudadano");

            if (idElemento == null)
                throw new System.ArgumentNullException("idElemento");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/ciudadanos/removeElemento/{idCiudadano}/{tipoElemento}/{idElemento}"
                    urlBuilder_.Append("api/ciudadanos/removeElemento/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(idCiudadano, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(tipoElemento, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(idElemento, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CiudadanoDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Permite eliminar un elemento de una colección (teléfono, corroe, etc) de un ciudadano mediante NIF del ciudadano y descripción del elemento. No se puede usar para domicilios
        /// </summary>
        /// <param name="nifCiudadano">Documento del ciudadano.</param>
        /// <param name="descripcionElemento">Por ejemplo, el número de teléfono o correo electrónico.</param>
        /// <param name="tipoElemento">Tipo de elemento a eliminar (Domicilio (1), Telefono (2), Correo electrónico (3), DEH (4)).</param>
        /// <param name="dir3">Dir3 ciudadano (opcional).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CiudadanoDto> ApiCiudadanos_RemoveElementoCiudadanoByNifAsync(string nifCiudadano, string descripcionElemento, TipoElemento2 tipoElemento, string dir3)
        {
            return ApiCiudadanos_RemoveElementoCiudadanoByNifAsync(nifCiudadano, descripcionElemento, tipoElemento, dir3, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Permite eliminar un elemento de una colección (teléfono, corroe, etc) de un ciudadano mediante NIF del ciudadano y descripción del elemento. No se puede usar para domicilios
        /// </summary>
        /// <param name="nifCiudadano">Documento del ciudadano.</param>
        /// <param name="descripcionElemento">Por ejemplo, el número de teléfono o correo electrónico.</param>
        /// <param name="tipoElemento">Tipo de elemento a eliminar (Domicilio (1), Telefono (2), Correo electrónico (3), DEH (4)).</param>
        /// <param name="dir3">Dir3 ciudadano (opcional).</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CiudadanoDto> ApiCiudadanos_RemoveElementoCiudadanoByNifAsync(string nifCiudadano, string descripcionElemento, TipoElemento2 tipoElemento, string dir3, System.Threading.CancellationToken cancellationToken)
        {
            if (nifCiudadano == null)
                throw new System.ArgumentNullException("nifCiudadano");

            if (tipoElemento == null)
                throw new System.ArgumentNullException("tipoElemento");

            if (descripcionElemento == null)
                throw new System.ArgumentNullException("descripcionElemento");

            if (dir3 == null)
                throw new System.ArgumentNullException("dir3");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/ciudadanos/removeElementoByNif/{nifCiudadano}/{tipoElemento}"
                    urlBuilder_.Append("api/ciudadanos/removeElementoByNif/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(nifCiudadano, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(tipoElemento, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("descripcionElemento")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(descripcionElemento, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("dir3")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(dir3, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CiudadanoDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Devuelve la lista de procedencias
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProcedenciaEditViewModel>> ApiCiudadanos_ListProcedenciasAsync()
        {
            return ApiCiudadanos_ListProcedenciasAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Devuelve la lista de procedencias
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProcedenciaEditViewModel>> ApiCiudadanos_ListProcedenciasAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/ciudadanos/listProcedencias"
                    urlBuilder_.Append("api/ciudadanos/listProcedencias");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ProcedenciaEditViewModel>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Añade una nueva procedencia. La procedencia es un concepto genérico que debe servir para conocer la procedencia del ciudadano (Padrón, Carga inicial, etc.)
        /// </summary>
        /// <param name="procedencia">Procedencia que se añadirá</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ProcedenciaEditViewModel> ApiCiudadanos_NewProcedenciaAsync(ProcedenciaEditViewModel procedencia)
        {
            return ApiCiudadanos_NewProcedenciaAsync(procedencia, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Añade una nueva procedencia. La procedencia es un concepto genérico que debe servir para conocer la procedencia del ciudadano (Padrón, Carga inicial, etc.)
        /// </summary>
        /// <param name="procedencia">Procedencia que se añadirá</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProcedenciaEditViewModel> ApiCiudadanos_NewProcedenciaAsync(ProcedenciaEditViewModel procedencia, System.Threading.CancellationToken cancellationToken)
        {
            if (procedencia == null)
                throw new System.ArgumentNullException("procedencia");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(procedencia, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/ciudadanos/newProcedencia"
                    urlBuilder_.Append("api/ciudadanos/newProcedencia");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProcedenciaEditViewModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Permite crear un nuevo ciudadano. Esta opción puede crear ciudadanos duplicados si son CIF o SinDocumento.
        /// </summary>
        /// <param name="ciudadano">Nuevo ciudadano</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<RespuestaServicioWebOfCiudadanoEditViewModel> ApiCiudadanos_NewCiudadanoAsync(NewCiudadanoDto ciudadano)
        {
            return ApiCiudadanos_NewCiudadanoAsync(ciudadano, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Permite crear un nuevo ciudadano. Esta opción puede crear ciudadanos duplicados si son CIF o SinDocumento.
        /// </summary>
        /// <param name="ciudadano">Nuevo ciudadano</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RespuestaServicioWebOfCiudadanoEditViewModel> ApiCiudadanos_NewCiudadanoAsync(NewCiudadanoDto ciudadano, System.Threading.CancellationToken cancellationToken)
        {
            if (ciudadano == null)
                throw new System.ArgumentNullException("ciudadano");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(ciudadano, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/ciudadanos/new"
                    urlBuilder_.Append("api/ciudadanos/new");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RespuestaServicioWebOfCiudadanoEditViewModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Sincroniza un ciudadano en la base de datos. Añade un nuevo ciudadano si no existe, de lo contrario, actualiza sus datos.
        /// </summary>
        /// <param name="ciudadano">Datos del ciudadano para sincronizar. entidadId y CodigoEntidad son equivalentes</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<RespuestaServicioWebOfCiudadanoEditViewModel> ApiCiudadanos_SyncCiudadanoAsync(CiudadanoEditDto ciudadano)
        {
            return ApiCiudadanos_SyncCiudadanoAsync(ciudadano, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sincroniza un ciudadano en la base de datos. Añade un nuevo ciudadano si no existe, de lo contrario, actualiza sus datos.
        /// </summary>
        /// <param name="ciudadano">Datos del ciudadano para sincronizar. entidadId y CodigoEntidad son equivalentes</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RespuestaServicioWebOfCiudadanoEditViewModel> ApiCiudadanos_SyncCiudadanoAsync(CiudadanoEditDto ciudadano, System.Threading.CancellationToken cancellationToken)
        {
            if (ciudadano == null)
                throw new System.ArgumentNullException("ciudadano");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(ciudadano, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/ciudadanos/sync"
                    urlBuilder_.Append("api/ciudadanos/sync");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RespuestaServicioWebOfCiudadanoEditViewModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Permite cambiar la personalidad de un ciudadano. No se permite el cambio a Sin Documento.
        /// </summary>
        /// <param name="cambio">Datos del ciudadano para cambiar la personalidad</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<RespuestaServicioWebOfCiudadanoEditViewModel> ApiCiudadanos_CambiarPersonalidadAsync(int ciudadanoId, CambioPersonalidadDto cambio)
        {
            return ApiCiudadanos_CambiarPersonalidadAsync(ciudadanoId, cambio, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Permite cambiar la personalidad de un ciudadano. No se permite el cambio a Sin Documento.
        /// </summary>
        /// <param name="cambio">Datos del ciudadano para cambiar la personalidad</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RespuestaServicioWebOfCiudadanoEditViewModel> ApiCiudadanos_CambiarPersonalidadAsync(int ciudadanoId, CambioPersonalidadDto cambio, System.Threading.CancellationToken cancellationToken)
        {
            if (ciudadanoId == null)
                throw new System.ArgumentNullException("ciudadanoId");

            if (cambio == null)
                throw new System.ArgumentNullException("cambio");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(cambio, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/ciudadanos/patchPersonalidad/{ciudadanoId}"
                    urlBuilder_.Append("api/ciudadanos/patchPersonalidad/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(ciudadanoId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RespuestaServicioWebOfCiudadanoEditViewModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Genera un token JWT para autenticación de usuarios externos
        /// </summary>
        /// <param name="peticion">Petición con entidad, wsUser y password. Opcionalmente se puede indicar el NIF, obligatoriamente si se van a utilizar operaciones de escritura.</param>
        /// <returns>JWT</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> ApiJwtAuthentication_PostValueAsync(ParametrosAutenticacion peticion)
        {
            return ApiJwtAuthentication_PostValueAsync(peticion, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Genera un token JWT para autenticación de usuarios externos
        /// </summary>
        /// <param name="peticion">Petición con entidad, wsUser y password. Opcionalmente se puede indicar el NIF, obligatoriamente si se van a utilizar operaciones de escritura.</param>
        /// <returns>JWT</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> ApiJwtAuthentication_PostValueAsync(ParametrosAutenticacion peticion, System.Threading.CancellationToken cancellationToken)
        {
            if (peticion == null)
                throw new System.ArgumentNullException("peticion");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(peticion, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/jwtautenticacion"
                    urlBuilder_.Append("api/jwtautenticacion");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Devuelve los datos del registro de entrada indicado por identificador único
        /// </summary>
        /// <param name="id">Identificador único registro (no confundir con número y año del registro)</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<EntradaViewModel> ApiRegistro_GetRegistroEntradaByIdAsync(int id)
        {
            return ApiRegistro_GetRegistroEntradaByIdAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Devuelve los datos del registro de entrada indicado por identificador único
        /// </summary>
        /// <param name="id">Identificador único registro (no confundir con número y año del registro)</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EntradaViewModel> ApiRegistro_GetRegistroEntradaByIdAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/registro/entradabyid/{id}"
                    urlBuilder_.Append("api/registro/entradabyid/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EntradaViewModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("NotFound", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("InternalServerError", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Devuelve los datos del registro de salida indicado por Identificador
        /// </summary>
        /// <param name="id">Identificador único registro (no confundir con número y año del registro)</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SalidaViewModel> ApiRegistro_GetRegistroSalidaByIdAsync(int id)
        {
            return ApiRegistro_GetRegistroSalidaByIdAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Devuelve los datos del registro de salida indicado por Identificador
        /// </summary>
        /// <param name="id">Identificador único registro (no confundir con número y año del registro)</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SalidaViewModel> ApiRegistro_GetRegistroSalidaByIdAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/registro/salidabyid/{id}"
                    urlBuilder_.Append("api/registro/salidabyid/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SalidaViewModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("NotFound", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("InternalServerError", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Devuelve los datos del registro indicado por Identificador
        /// </summary>
        /// <param name="id">Identificador único registro (no confundir con número y año del registro)</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<EntradaSalidaViewModel> ApiRegistro_GetRegistroByIdAsync(int id)
        {
            return ApiRegistro_GetRegistroByIdAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Devuelve los datos del registro indicado por Identificador
        /// </summary>
        /// <param name="id">Identificador único registro (no confundir con número y año del registro)</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EntradaSalidaViewModel> ApiRegistro_GetRegistroByIdAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/registro/registrobyid/{id}"
                    urlBuilder_.Append("api/registro/registrobyid/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EntradaSalidaViewModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("NotFound", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("InternalServerError", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Devuelve el histórico de cambios del registro por Id
        /// </summary>
        /// <param name="id">Identificador único registro (no confundir con número y año del registro)</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<HistRegistroViewModel>> ApiRegistro_GetHistorialRegistroEntradaByIdAsync(int id)
        {
            return ApiRegistro_GetHistorialRegistroEntradaByIdAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Devuelve el histórico de cambios del registro por Id
        /// </summary>
        /// <param name="id">Identificador único registro (no confundir con número y año del registro)</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<HistRegistroViewModel>> ApiRegistro_GetHistorialRegistroEntradaByIdAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/registro/historialentrada/{id}"
                    urlBuilder_.Append("api/registro/historialentrada/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<HistRegistroViewModel>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("NotFound", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("InternalServerError", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Devuelve los datos del registro de entrada indicado por número y año del registro
        /// </summary>
        /// <param name="ejercicio">Año de ejercicio del registro a buscar</param>
        /// <param name="numeroRegistro">Número de registro</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<EntradaViewModel> ApiRegistro_GetRegistroEntradaAsync(int ejercicio, int numeroRegistro)
        {
            return ApiRegistro_GetRegistroEntradaAsync(ejercicio, numeroRegistro, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Devuelve los datos del registro de entrada indicado por número y año del registro
        /// </summary>
        /// <param name="ejercicio">Año de ejercicio del registro a buscar</param>
        /// <param name="numeroRegistro">Número de registro</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EntradaViewModel> ApiRegistro_GetRegistroEntradaAsync(int ejercicio, int numeroRegistro, System.Threading.CancellationToken cancellationToken)
        {
            if (ejercicio == null)
                throw new System.ArgumentNullException("ejercicio");

            if (numeroRegistro == null)
                throw new System.ArgumentNullException("numeroRegistro");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/registro/entradabynum/{ejercicio}/{numeroRegistro}"
                    urlBuilder_.Append("api/registro/entradabynum/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(ejercicio, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(numeroRegistro, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EntradaViewModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("NotFound", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("InternalServerError", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Devuelve los datos del registro de salida indicado por número y año del registro
        /// </summary>
        /// <param name="ejercicio">Año de ejercicio del registro a buscar</param>
        /// <param name="numeroRegistro">Número de registro</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SalidaViewModel> ApiRegistro_GetRegistroSalidaAsync(int ejercicio, int numeroRegistro)
        {
            return ApiRegistro_GetRegistroSalidaAsync(ejercicio, numeroRegistro, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Devuelve los datos del registro de salida indicado por número y año del registro
        /// </summary>
        /// <param name="ejercicio">Año de ejercicio del registro a buscar</param>
        /// <param name="numeroRegistro">Número de registro</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SalidaViewModel> ApiRegistro_GetRegistroSalidaAsync(int ejercicio, int numeroRegistro, System.Threading.CancellationToken cancellationToken)
        {
            if (ejercicio == null)
                throw new System.ArgumentNullException("ejercicio");

            if (numeroRegistro == null)
                throw new System.ArgumentNullException("numeroRegistro");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/registro/salidabynum/{ejercicio}/{numeroRegistro}"
                    urlBuilder_.Append("api/registro/salidabynum/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(ejercicio, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(numeroRegistro, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SalidaViewModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("NotFound", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("InternalServerError", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Devuelve los datos del registro indicado por número y año del registro
        /// </summary>
        /// <param name="ejercicio">Año de ejercicio del registro a buscar</param>
        /// <param name="numeroRegistro">Número de registro</param>
        /// <param name="tipo">Tipo de registro (Entrada o Salida)</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<EntradaSalidaViewModel> ApiRegistro_GetRegistroAsync(int ejercicio, int numeroRegistro, Tipo tipo)
        {
            return ApiRegistro_GetRegistroAsync(ejercicio, numeroRegistro, tipo, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Devuelve los datos del registro indicado por número y año del registro
        /// </summary>
        /// <param name="ejercicio">Año de ejercicio del registro a buscar</param>
        /// <param name="numeroRegistro">Número de registro</param>
        /// <param name="tipo">Tipo de registro (Entrada o Salida)</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EntradaSalidaViewModel> ApiRegistro_GetRegistroAsync(int ejercicio, int numeroRegistro, Tipo tipo, System.Threading.CancellationToken cancellationToken)
        {
            if (ejercicio == null)
                throw new System.ArgumentNullException("ejercicio");

            if (numeroRegistro == null)
                throw new System.ArgumentNullException("numeroRegistro");

            if (tipo == null)
                throw new System.ArgumentNullException("tipo");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/registro/registrobynum/{ejercicio}/{numeroRegistro}/{tipo}"
                    urlBuilder_.Append("api/registro/registrobynum/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(ejercicio, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(numeroRegistro, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(tipo, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EntradaSalidaViewModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("NotFound", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("InternalServerError", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Devuelve el contenido, csv o url de descarga del anexo solicitado
        /// </summary>
        /// <param name="idAnexo">Identificador del anexo</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GetContenidoAnexoResponse> ApiRegistro_GetRutaAnexoAsync(int idAnexo)
        {
            return ApiRegistro_GetRutaAnexoAsync(idAnexo, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Devuelve el contenido, csv o url de descarga del anexo solicitado
        /// </summary>
        /// <param name="idAnexo">Identificador del anexo</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetContenidoAnexoResponse> ApiRegistro_GetRutaAnexoAsync(int idAnexo, System.Threading.CancellationToken cancellationToken)
        {
            if (idAnexo == null)
                throw new System.ArgumentNullException("idAnexo");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/registro/rutaanexo/{idAnexo}"
                    urlBuilder_.Append("api/registro/rutaanexo/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(idAnexo, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetContenidoAnexoResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("NotFound", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("InternalServerError", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Devuelve un listado de los destinos posibles de la entidad
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DestinoDto>> ApiRegistro_ListDestinosEntidadAsync()
        {
            return ApiRegistro_ListDestinosEntidadAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Devuelve un listado de los destinos posibles de la entidad
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DestinoDto>> ApiRegistro_ListDestinosEntidadAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/registro/destinos"
                    urlBuilder_.Append("api/registro/destinos");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<DestinoDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("NotFound", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("InternalServerError", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Devuelve un listado de los registros de entrada filtrados según se indique
        /// </summary>
        /// <param name="filtro">Es el mismo filtro que el campo de la interfaz de usuario. Filtro por NIF/CIF/NIE en el caso de que el texto sea uno válido. 
        /// <br/> Por número de registro en el caso de que sea un entero. Por nombre de ciudadano, resumen u otros contenidos de los registros en cualquier otro caso, admite comodines ? y *.</param>
        /// <param name="ejercicio">Ejercicio del registro</param>
        /// <param name="asuntoId">Opcional. Identificador del asunto</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EntradaViewModel>> ApiRegistro_ListRegistrosEntradaAsync(string filtro, int ejercicio, int asuntoId)
        {
            return ApiRegistro_ListRegistrosEntradaAsync(filtro, ejercicio, asuntoId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Devuelve un listado de los registros de entrada filtrados según se indique
        /// </summary>
        /// <param name="filtro">Es el mismo filtro que el campo de la interfaz de usuario. Filtro por NIF/CIF/NIE en el caso de que el texto sea uno válido. 
        /// <br/> Por número de registro en el caso de que sea un entero. Por nombre de ciudadano, resumen u otros contenidos de los registros en cualquier otro caso, admite comodines ? y *.</param>
        /// <param name="ejercicio">Ejercicio del registro</param>
        /// <param name="asuntoId">Opcional. Identificador del asunto</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EntradaViewModel>> ApiRegistro_ListRegistrosEntradaAsync(string filtro, int ejercicio, int asuntoId, System.Threading.CancellationToken cancellationToken)
        {
            if (filtro == null)
                throw new System.ArgumentNullException("filtro");

            if (ejercicio == null)
                throw new System.ArgumentNullException("ejercicio");

            if (asuntoId == null)
                throw new System.ArgumentNullException("asuntoId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/registro/entradas"
                    urlBuilder_.Append("api/registro/entradas");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("filtro")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(filtro, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("ejercicio")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ejercicio, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("asuntoId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(asuntoId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<EntradaViewModel>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("NotFound", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("InternalServerError", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Devuelve un listado de los asuntos telemáticos existentes de la entidad
        /// </summary>
        /// <param name="tipo">Tipo de asunto (Entrada o Salida)</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AsuntoDto>> ApiRegistro_ListAsuntosEntidadAsync(Tipo2 tipo)
        {
            return ApiRegistro_ListAsuntosEntidadAsync(tipo, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Devuelve un listado de los asuntos telemáticos existentes de la entidad
        /// </summary>
        /// <param name="tipo">Tipo de asunto (Entrada o Salida)</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AsuntoDto>> ApiRegistro_ListAsuntosEntidadAsync(Tipo2 tipo, System.Threading.CancellationToken cancellationToken)
        {
            if (tipo == null)
                throw new System.ArgumentNullException("tipo");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/registro/asuntos/{tipo}"
                    urlBuilder_.Append("api/registro/asuntos/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(tipo, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<AsuntoDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("NotFound", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("InternalServerError", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Devuelve un listado de los asientos según los filtros
        /// </summary>
        /// <param name="request">Contiene:
        /// <br/> - filtro: Filtros, todos opcionales, por Tipo (E/S), Ejercicio, Estado, Oficina, Factura, Archivado, Destinos/Origen por identificador,
        /// <br/> Interesados (remitentes/destinatarios por documento (NIF, NIE, CIF, etc) y los rangos de fecha de grabación, validez y completo.
        /// <br/> - orden: Ascendente = true, Descendente = false
        /// <br/> - pagina: En el caso de que sean más de 10 resultados se puede indicar el número de página de los resultados (1, 2, 3...)</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EntradaSalidaViewModel>> ApiRegistro_FilterRegistrosAsync(FilterRegistrosRequest request)
        {
            return ApiRegistro_FilterRegistrosAsync(request, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Devuelve un listado de los asientos según los filtros
        /// </summary>
        /// <param name="request">Contiene:
        /// <br/> - filtro: Filtros, todos opcionales, por Tipo (E/S), Ejercicio, Estado, Oficina, Factura, Archivado, Destinos/Origen por identificador,
        /// <br/> Interesados (remitentes/destinatarios por documento (NIF, NIE, CIF, etc) y los rangos de fecha de grabación, validez y completo.
        /// <br/> - orden: Ascendente = true, Descendente = false
        /// <br/> - pagina: En el caso de que sean más de 10 resultados se puede indicar el número de página de los resultados (1, 2, 3...)</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EntradaSalidaViewModel>> ApiRegistro_FilterRegistrosAsync(FilterRegistrosRequest request, System.Threading.CancellationToken cancellationToken)
        {
            if (request == null)
                throw new System.ArgumentNullException("request");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(request, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/registro/filterregistros"
                    urlBuilder_.Append("api/registro/filterregistros");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<EntradaSalidaViewModel>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("NotFound", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("InternalServerError", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Devuelve un listado de los asientos de entrada según los filtros
        /// </summary>
        /// <param name="request">Contiene:
        /// <br/> - filtro: Filtros, todos opcionales, Ejercicio, Estado, Oficina, Factura, Archivado, Destinos/Origen por identificador,
        /// <br/> Interesados (remitentes/destinatarios por documento (NIF, NIE, CIF, etc) y los rangos de fecha de grabación, validez y completo.
        /// <br/> - orden: Ascendente = true, Descendente = false
        /// <br/> - pagina: En el caso de que sean más de 10 resultados se puede indicar el número de página de los resultados (1, 2, 3...)</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EntradaViewModel>> ApiRegistro_FilterRegistrosEntradaAsync(FilterRegistrosRequest request)
        {
            return ApiRegistro_FilterRegistrosEntradaAsync(request, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Devuelve un listado de los asientos de entrada según los filtros
        /// </summary>
        /// <param name="request">Contiene:
        /// <br/> - filtro: Filtros, todos opcionales, Ejercicio, Estado, Oficina, Factura, Archivado, Destinos/Origen por identificador,
        /// <br/> Interesados (remitentes/destinatarios por documento (NIF, NIE, CIF, etc) y los rangos de fecha de grabación, validez y completo.
        /// <br/> - orden: Ascendente = true, Descendente = false
        /// <br/> - pagina: En el caso de que sean más de 10 resultados se puede indicar el número de página de los resultados (1, 2, 3...)</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EntradaViewModel>> ApiRegistro_FilterRegistrosEntradaAsync(FilterRegistrosRequest request, System.Threading.CancellationToken cancellationToken)
        {
            if (request == null)
                throw new System.ArgumentNullException("request");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(request, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/registro/filterentradas"
                    urlBuilder_.Append("api/registro/filterentradas");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<EntradaViewModel>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("NotFound", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("InternalServerError", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Devuelve un listado de los asientos de salida según los filtros
        /// </summary>
        /// <param name="request">Contiene:
        /// <br/> - filtro: Filtros, todos opcionales, Ejercicio, Estado, Oficina, Factura, Archivado, Destinos/Origen por identificador,
        /// <br/> Interesados (remitentes/destinatarios por documento (NIF, NIE, CIF, etc) y los rangos de fecha de grabación, validez y completo.
        /// <br/> - orden: Ascendente = true, Descendente = false
        /// <br/> - pagina: En el caso de que sean más de 10 resultados se puede indicar el número de página de los resultados (1, 2, 3...)</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SalidaViewModel>> ApiRegistro_FilterRegistrosSalidaAsync(FilterRegistrosRequest request)
        {
            return ApiRegistro_FilterRegistrosSalidaAsync(request, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Devuelve un listado de los asientos de salida según los filtros
        /// </summary>
        /// <param name="request">Contiene:
        /// <br/> - filtro: Filtros, todos opcionales, Ejercicio, Estado, Oficina, Factura, Archivado, Destinos/Origen por identificador,
        /// <br/> Interesados (remitentes/destinatarios por documento (NIF, NIE, CIF, etc) y los rangos de fecha de grabación, validez y completo.
        /// <br/> - orden: Ascendente = true, Descendente = false
        /// <br/> - pagina: En el caso de que sean más de 10 resultados se puede indicar el número de página de los resultados (1, 2, 3...)</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SalidaViewModel>> ApiRegistro_FilterRegistrosSalidaAsync(FilterRegistrosRequest request, System.Threading.CancellationToken cancellationToken)
        {
            if (request == null)
                throw new System.ArgumentNullException("request");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(request, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/registro/filtersalidas"
                    urlBuilder_.Append("api/registro/filtersalidas");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<SalidaViewModel>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("NotFound", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("InternalServerError", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Devuelve un listado de los identificadores de los asientos según el filtro
        /// </summary>
        /// <param name="filtro">Filtros, todos opcionales, por Tipo (E/S), Ejercicio, Estado, Oficina, Factura, Archivado, 
        /// <br/> Destinos/Origen por identificador, Interesados (remitentes/destinatarios por documento (NIF, NIE, CIF, etc), 
        /// <br/> asunto, y los rangos de fecha de grabación, validez y completo</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<int>> ApiRegistro_FilterRegistrosAmpliadoAsync(FiltroRegistroDto filtro)
        {
            return ApiRegistro_FilterRegistrosAmpliadoAsync(filtro, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Devuelve un listado de los identificadores de los asientos según el filtro
        /// </summary>
        /// <param name="filtro">Filtros, todos opcionales, por Tipo (E/S), Ejercicio, Estado, Oficina, Factura, Archivado, 
        /// <br/> Destinos/Origen por identificador, Interesados (remitentes/destinatarios por documento (NIF, NIE, CIF, etc), 
        /// <br/> asunto, y los rangos de fecha de grabación, validez y completo</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<int>> ApiRegistro_FilterRegistrosAmpliadoAsync(FiltroRegistroDto filtro, System.Threading.CancellationToken cancellationToken)
        {
            if (filtro == null)
                throw new System.ArgumentNullException("filtro");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(filtro, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/registro/filterampliado"
                    urlBuilder_.Append("api/registro/filterampliado");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<int>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("NotFound", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("InternalServerError", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Devuelve un listado de los asientos de entrada junto con los formularios asociados según los filtros
        /// </summary>
        /// <param name="request">Contiene:
        /// <br/> - filtro: Filtros, todos opcionales, Ejercicio, Estado, Oficina, Factura, Archivado, Destinos/Origen por identificador,
        /// <br/> Interesados (remitentes/destinatarios por documento (NIF, NIE, CIF, etc) y los rangos de fecha de grabación, validez y completo.
        /// <br/> - idioma: Idioma de los formularios</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<EntradasFormularios> ApiRegistro_FilterRegistrosEntradaConFormulariosAsync(FilterRegistrosRequestFormularios request)
        {
            return ApiRegistro_FilterRegistrosEntradaConFormulariosAsync(request, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Devuelve un listado de los asientos de entrada junto con los formularios asociados según los filtros
        /// </summary>
        /// <param name="request">Contiene:
        /// <br/> - filtro: Filtros, todos opcionales, Ejercicio, Estado, Oficina, Factura, Archivado, Destinos/Origen por identificador,
        /// <br/> Interesados (remitentes/destinatarios por documento (NIF, NIE, CIF, etc) y los rangos de fecha de grabación, validez y completo.
        /// <br/> - idioma: Idioma de los formularios</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EntradasFormularios> ApiRegistro_FilterRegistrosEntradaConFormulariosAsync(FilterRegistrosRequestFormularios request, System.Threading.CancellationToken cancellationToken)
        {
            if (request == null)
                throw new System.ArgumentNullException("request");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(request, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/registro/filterentradasformularios"
                    urlBuilder_.Append("api/registro/filterentradasformularios");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EntradasFormularios>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("NotFound", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("InternalServerError", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Se añade un nuevo registro. El registro se añadirá al ejercicio actual
        /// </summary>
        /// <param name="request">Contiene el nuevo registro a añadir</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<EntradaViewModel> ApiRegistro_NewRegistroEntradaAsync(NewRegistroRequest request)
        {
            return ApiRegistro_NewRegistroEntradaAsync(request, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Se añade un nuevo registro. El registro se añadirá al ejercicio actual
        /// </summary>
        /// <param name="request">Contiene el nuevo registro a añadir</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EntradaViewModel> ApiRegistro_NewRegistroEntradaAsync(NewRegistroRequest request, System.Threading.CancellationToken cancellationToken)
        {
            if (request == null)
                throw new System.ArgumentNullException("request");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(request, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/registro/newentrada"
                    urlBuilder_.Append("api/registro/newentrada");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EntradaViewModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("NotFound", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("InternalServerError", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Se añade un nuevo registro. El registro se añadirá al ejercicio actual
        /// </summary>
        /// <param name="request">Contiene el nuevo registro a añadir</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SalidaViewModel> ApiRegistro_NewRegistroSalidaAsync(NewRegistroRequest request)
        {
            return ApiRegistro_NewRegistroSalidaAsync(request, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Se añade un nuevo registro. El registro se añadirá al ejercicio actual
        /// </summary>
        /// <param name="request">Contiene el nuevo registro a añadir</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SalidaViewModel> ApiRegistro_NewRegistroSalidaAsync(NewRegistroRequest request, System.Threading.CancellationToken cancellationToken)
        {
            if (request == null)
                throw new System.ArgumentNullException("request");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(request, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/registro/newsalida"
                    urlBuilder_.Append("api/registro/newsalida");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SalidaViewModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("NotFound", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("InternalServerError", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Se añade un nuevo asiento pendiente de registrar. Permite Expone/Solicita para que se realice una firma biométrica. 
        /// <br/>El registro se añadirá al ejercicio actual
        /// </summary>
        /// <param name="request">Contiene el nuevo asiento a añadir</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<EntradaSalidaViewModel> ApiRegistro_NewPendienteDeRegistroAsync(NewPendienteRegistroRequest request)
        {
            return ApiRegistro_NewPendienteDeRegistroAsync(request, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Se añade un nuevo asiento pendiente de registrar. Permite Expone/Solicita para que se realice una firma biométrica. 
        /// <br/>El registro se añadirá al ejercicio actual
        /// </summary>
        /// <param name="request">Contiene el nuevo asiento a añadir</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EntradaSalidaViewModel> ApiRegistro_NewPendienteDeRegistroAsync(NewPendienteRegistroRequest request, System.Threading.CancellationToken cancellationToken)
        {
            if (request == null)
                throw new System.ArgumentNullException("request");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(request, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/registro/newpendiente"
                    urlBuilder_.Append("api/registro/newpendiente");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EntradaSalidaViewModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("NotFound", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("InternalServerError", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Se añade un nuevo anexo a un registro existente
        /// </summary>
        /// <param name="request">Contiene los nuevos anexos a añadir, el identificador del registro, 
        /// <br/> el idioma del anexo, y si los anexos no se deben sellar (PDFs)</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<EntradaSalidaViewModel> ApiRegistro_NewAnexosAsync(NewAnexosRequest request)
        {
            return ApiRegistro_NewAnexosAsync(request, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Se añade un nuevo anexo a un registro existente
        /// </summary>
        /// <param name="request">Contiene los nuevos anexos a añadir, el identificador del registro, 
        /// <br/> el idioma del anexo, y si los anexos no se deben sellar (PDFs)</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EntradaSalidaViewModel> ApiRegistro_NewAnexosAsync(NewAnexosRequest request, System.Threading.CancellationToken cancellationToken)
        {
            if (request == null)
                throw new System.ArgumentNullException("request");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(request, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/registro/newanexos"
                    urlBuilder_.Append("api/registro/newanexos");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EntradaSalidaViewModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("NotFound", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("InternalServerError", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Genera un justificante de un asiento creado
        /// </summary>
        /// <param name="request">Contiene el número de registro, ejercicio, tipo (Entrada o Salida) y código ISO del idioma del justificante</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AnexoViewModel> ApiRegistro_GenerarJustificanteAsync(JustificanteRequest request)
        {
            return ApiRegistro_GenerarJustificanteAsync(request, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Genera un justificante de un asiento creado
        /// </summary>
        /// <param name="request">Contiene el número de registro, ejercicio, tipo (Entrada o Salida) y código ISO del idioma del justificante</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AnexoViewModel> ApiRegistro_GenerarJustificanteAsync(JustificanteRequest request, System.Threading.CancellationToken cancellationToken)
        {
            if (request == null)
                throw new System.ArgumentNullException("request");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(request, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/registro/justificante"
                    urlBuilder_.Append("api/registro/justificante");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AnexoViewModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("NotFound", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("InternalServerError", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Registra el asiento y genera un justificante de un asiento creado pendiente de registro
        /// </summary>
        /// <param name="request">Contiene el identificador del registro, código ISO del idioma del justificante
        /// <br/> y procedencia de los datos del remitente en el caso que sea necesario</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AnexoViewModel> ApiRegistro_GenerarJustificantePendienteDeRegistroAsync(JustificantePendienteRequest request)
        {
            return ApiRegistro_GenerarJustificantePendienteDeRegistroAsync(request, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Registra el asiento y genera un justificante de un asiento creado pendiente de registro
        /// </summary>
        /// <param name="request">Contiene el identificador del registro, código ISO del idioma del justificante
        /// <br/> y procedencia de los datos del remitente en el caso que sea necesario</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AnexoViewModel> ApiRegistro_GenerarJustificantePendienteDeRegistroAsync(JustificantePendienteRequest request, System.Threading.CancellationToken cancellationToken)
        {
            if (request == null)
                throw new System.ArgumentNullException("request");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(request, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/registro/justificantependiente"
                    urlBuilder_.Append("api/registro/justificantependiente");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AnexoViewModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("NotFound", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("InternalServerError", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Genera el PDF con todos los registros de un ejercicio determinado
        /// </summary>
        /// <param name="request">Contiene el ejercicio del que se obtendrán los registros, 
        /// <br/> el título del libro y el tipo de registro (Entrada o Salida)</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<byte[]> ApiRegistro_GenerarLibroOficialDeRegistrosAsync(LibroOficialRequest request)
        {
            return ApiRegistro_GenerarLibroOficialDeRegistrosAsync(request, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Genera el PDF con todos los registros de un ejercicio determinado
        /// </summary>
        /// <param name="request">Contiene el ejercicio del que se obtendrán los registros, 
        /// <br/> el título del libro y el tipo de registro (Entrada o Salida)</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<byte[]> ApiRegistro_GenerarLibroOficialDeRegistrosAsync(LibroOficialRequest request, System.Threading.CancellationToken cancellationToken)
        {
            if (request == null)
                throw new System.ArgumentNullException("request");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(request, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/registro/libro"
                    urlBuilder_.Append("api/registro/libro");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<byte[]>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("NotFound", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("InternalServerError", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Crea un nuevo asunto
        /// </summary>
        /// <param name="asunto">Asunto que se dará de alta</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AsuntoDto> ApiRegistro_NewAsuntoAsync(AsuntoDto asunto)
        {
            return ApiRegistro_NewAsuntoAsync(asunto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Crea un nuevo asunto
        /// </summary>
        /// <param name="asunto">Asunto que se dará de alta</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AsuntoDto> ApiRegistro_NewAsuntoAsync(AsuntoDto asunto, System.Threading.CancellationToken cancellationToken)
        {
            if (asunto == null)
                throw new System.ArgumentNullException("asunto");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(asunto, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/registro/newasunto"
                    urlBuilder_.Append("api/registro/newasunto");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AsuntoDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("NotFound", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("InternalServerError", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Permite habilitar/deshabilitar un asunto
        /// </summary>
        /// <param name="idAsunto">Identificador del asunto que se modificará</param>
        /// <param name="request">Contiene el indicador para habilitar o deshabilitar el asunto</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AsuntoHabilitadoDto> ApiRegistro_DisableAsuntoAsync(int idAsunto, HabilitarAsuntoRequest request)
        {
            return ApiRegistro_DisableAsuntoAsync(idAsunto, request, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Permite habilitar/deshabilitar un asunto
        /// </summary>
        /// <param name="idAsunto">Identificador del asunto que se modificará</param>
        /// <param name="request">Contiene el indicador para habilitar o deshabilitar el asunto</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AsuntoHabilitadoDto> ApiRegistro_DisableAsuntoAsync(int idAsunto, HabilitarAsuntoRequest request, System.Threading.CancellationToken cancellationToken)
        {
            if (idAsunto == null)
                throw new System.ArgumentNullException("idAsunto");

            if (request == null)
                throw new System.ArgumentNullException("request");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(request, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/registro/asuntoestado/{idAsunto}"
                    urlBuilder_.Append("api/registro/asuntoestado/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(idAsunto, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AsuntoHabilitadoDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("NotFound", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("InternalServerError", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Permite modificar un asunto
        /// </summary>
        /// <param name="idAsunto">Identificador del asunto que se modificará</param>
        /// <param name="request">Contiene las propiedades a modificar</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AsuntoDto> ApiRegistro_ModificaAsuntoAsync(int idAsunto, ModificaAsuntoRequest request)
        {
            return ApiRegistro_ModificaAsuntoAsync(idAsunto, request, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Permite modificar un asunto
        /// </summary>
        /// <param name="idAsunto">Identificador del asunto que se modificará</param>
        /// <param name="request">Contiene las propiedades a modificar</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AsuntoDto> ApiRegistro_ModificaAsuntoAsync(int idAsunto, ModificaAsuntoRequest request, System.Threading.CancellationToken cancellationToken)
        {
            if (idAsunto == null)
                throw new System.ArgumentNullException("idAsunto");

            if (request == null)
                throw new System.ArgumentNullException("request");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(request, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/registro/asunto/{idAsunto}"
                    urlBuilder_.Append("api/registro/asunto/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(idAsunto, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AsuntoDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("NotFound", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("InternalServerError", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Permite asignar un número a un asiento pendiente de registro. Esta llamada sólo se debe utilizar 
        /// <br/>en caso de migraciones de asientos desde otras entidades. No genera justificante.
        /// </summary>
        /// <param name="request">Contiene los datos para asignar el número: idRegistro, número de asiento, 
        /// <br/> si se deben sellar los anexos, fecha de grabación, validaciones de correlativos y fechas</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<EntradaSalidaViewModel> ApiRegistro_AsignarNumeroPdteDeRegistroAsync(AsignarNumeroRequest request)
        {
            return ApiRegistro_AsignarNumeroPdteDeRegistroAsync(request, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Permite asignar un número a un asiento pendiente de registro. Esta llamada sólo se debe utilizar 
        /// <br/>en caso de migraciones de asientos desde otras entidades. No genera justificante.
        /// </summary>
        /// <param name="request">Contiene los datos para asignar el número: idRegistro, número de asiento, 
        /// <br/> si se deben sellar los anexos, fecha de grabación, validaciones de correlativos y fechas</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EntradaSalidaViewModel> ApiRegistro_AsignarNumeroPdteDeRegistroAsync(AsignarNumeroRequest request, System.Threading.CancellationToken cancellationToken)
        {
            if (request == null)
                throw new System.ArgumentNullException("request");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(request, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/registro/asignar-numero"
                    urlBuilder_.Append("api/registro/asignar-numero");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EntradaSalidaViewModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("NotFound", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("InternalServerError", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Cambia el estado de un asiento a pendiente de firma o viceversa
        /// </summary>
        /// <param name="idRegistro">idRegistro del registro al que se le asignará número de registro</param>
        /// <param name="request">Indica si el asiento debe estar pendiente de firma o no</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<int> ApiRegistro_SetPendienteDeFirmaAsync(int idRegistro, PendienteFirmaRequest request)
        {
            return ApiRegistro_SetPendienteDeFirmaAsync(idRegistro, request, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cambia el estado de un asiento a pendiente de firma o viceversa
        /// </summary>
        /// <param name="idRegistro">idRegistro del registro al que se le asignará número de registro</param>
        /// <param name="request">Indica si el asiento debe estar pendiente de firma o no</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<int> ApiRegistro_SetPendienteDeFirmaAsync(int idRegistro, PendienteFirmaRequest request, System.Threading.CancellationToken cancellationToken)
        {
            if (idRegistro == null)
                throw new System.ArgumentNullException("idRegistro");

            if (request == null)
                throw new System.ArgumentNullException("request");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(request, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/registro/pdtefirma/{idRegistro}"
                    urlBuilder_.Append("api/registro/pdtefirma/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(idRegistro, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("NotFound", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("InternalServerError", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Marca como leída todas las asignaciones de destino de un registro de Entrada
        /// </summary>
        /// <param name="idRegistro">idRegistro del registro a marcar como leído</param>
        /// <param name="request">Contiene las observaciones para el histórico del cambio</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<int> ApiRegistro_SetLeidoAsync(int idRegistro, LeidoRequest request)
        {
            return ApiRegistro_SetLeidoAsync(idRegistro, request, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Marca como leída todas las asignaciones de destino de un registro de Entrada
        /// </summary>
        /// <param name="idRegistro">idRegistro del registro a marcar como leído</param>
        /// <param name="request">Contiene las observaciones para el histórico del cambio</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<int> ApiRegistro_SetLeidoAsync(int idRegistro, LeidoRequest request, System.Threading.CancellationToken cancellationToken)
        {
            if (idRegistro == null)
                throw new System.ArgumentNullException("idRegistro");

            if (request == null)
                throw new System.ArgumentNullException("request");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(request, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/registro/leido/{idRegistro}"
                    urlBuilder_.Append("api/registro/leido/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(idRegistro, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("NotFound", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("InternalServerError", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<RespuestaEstadisticas> Estadisticas_GetValueAsync(string wssegUser, string wssegPassword, string wsEntidad, string desde, string hasta, Tipo3 tipo, int contenedor, string tipoRecuento)
        {
            return Estadisticas_GetValueAsync(wssegUser, wssegPassword, wsEntidad, desde, hasta, tipo, contenedor, tipoRecuento, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RespuestaEstadisticas> Estadisticas_GetValueAsync(string wssegUser, string wssegPassword, string wsEntidad, string desde, string hasta, Tipo3 tipo, int contenedor, string tipoRecuento, System.Threading.CancellationToken cancellationToken)
        {
            if (wssegUser == null)
                throw new System.ArgumentNullException("wssegUser");

            if (wssegPassword == null)
                throw new System.ArgumentNullException("wssegPassword");

            if (wsEntidad == null)
                throw new System.ArgumentNullException("wsEntidad");

            if (desde == null)
                throw new System.ArgumentNullException("desde");

            if (hasta == null)
                throw new System.ArgumentNullException("hasta");

            if (tipo == null)
                throw new System.ArgumentNullException("tipo");

            if (contenedor == null)
                throw new System.ArgumentNullException("contenedor");

            if (tipoRecuento == null)
                throw new System.ArgumentNullException("tipoRecuento");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/estadisticas"
                    urlBuilder_.Append("api/estadisticas");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("wssegUser")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(wssegUser, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("wssegPassword")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(wssegPassword, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("wsEntidad")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(wsEntidad, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("desde")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(desde, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("hasta")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(hasta, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("tipo")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tipo, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("contenedor")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(contenedor, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("tipoRecuento")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tipoRecuento, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RespuestaEstadisticas>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Estadisticas_AgrupadasAsync(string wssegUser, string wssegPassword, string wsEntidad, string desde, string hasta, Tipo4 tipo, string tipoRecuento)
        {
            return Estadisticas_AgrupadasAsync(wssegUser, wssegPassword, wsEntidad, desde, hasta, tipo, tipoRecuento, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Estadisticas_AgrupadasAsync(string wssegUser, string wssegPassword, string wsEntidad, string desde, string hasta, Tipo4 tipo, string tipoRecuento, System.Threading.CancellationToken cancellationToken)
        {
            if (wssegUser == null)
                throw new System.ArgumentNullException("wssegUser");

            if (wssegPassword == null)
                throw new System.ArgumentNullException("wssegPassword");

            if (wsEntidad == null)
                throw new System.ArgumentNullException("wsEntidad");

            if (desde == null)
                throw new System.ArgumentNullException("desde");

            if (hasta == null)
                throw new System.ArgumentNullException("hasta");

            if (tipo == null)
                throw new System.ArgumentNullException("tipo");

            if (tipoRecuento == null)
                throw new System.ArgumentNullException("tipoRecuento");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/estadisticas/agrupadas"
                    urlBuilder_.Append("api/estadisticas/agrupadas");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("wssegUser")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(wssegUser, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("wssegPassword")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(wssegPassword, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("wsEntidad")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(wsEntidad, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("desde")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(desde, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("hasta")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(hasta, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("tipo")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tipo, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("tipoRecuento")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tipoRecuento, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> Estadisticas_ListEntidadesAsync(string wssegUser, string wssegPassword)
        {
            return Estadisticas_ListEntidadesAsync(wssegUser, wssegPassword, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> Estadisticas_ListEntidadesAsync(string wssegUser, string wssegPassword, System.Threading.CancellationToken cancellationToken)
        {
            if (wssegUser == null)
                throw new System.ArgumentNullException("wssegUser");

            if (wssegPassword == null)
                throw new System.ArgumentNullException("wssegPassword");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/estadisticas/listEntidades"
                    urlBuilder_.Append("api/estadisticas/listEntidades");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("wssegUser")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(wssegUser, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("wssegPassword")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(wssegPassword, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<RespuestaIaDto> Ia_DameTipoIaEntidadAsync()
        {
            return Ia_DameTipoIaEntidadAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RespuestaIaDto> Ia_DameTipoIaEntidadAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/Ia/DameTipoIaEntidad"
                    urlBuilder_.Append("api/Ia/DameTipoIaEntidad");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RespuestaIaDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<RespuestaIaDto> Ia_DameResumenAsync(int registroId, string nif)
        {
            return Ia_DameResumenAsync(registroId, nif, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RespuestaIaDto> Ia_DameResumenAsync(int registroId, string nif, System.Threading.CancellationToken cancellationToken)
        {
            if (registroId == null)
                throw new System.ArgumentNullException("registroId");

            if (nif == null)
                throw new System.ArgumentNullException("nif");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/Ia/DameResumen"
                    urlBuilder_.Append("api/Ia/DameResumen");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("registroId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(registroId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("nif")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(nif, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RespuestaIaDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<RespuestaIaDto> Ia_DameDestinoAsync(int registroId, string nif)
        {
            return Ia_DameDestinoAsync(registroId, nif, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RespuestaIaDto> Ia_DameDestinoAsync(int registroId, string nif, System.Threading.CancellationToken cancellationToken)
        {
            if (registroId == null)
                throw new System.ArgumentNullException("registroId");

            if (nif == null)
                throw new System.ArgumentNullException("nif");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/Ia/DameDestino"
                    urlBuilder_.Append("api/Ia/DameDestino");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("registroId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(registroId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("nif")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(nif, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RespuestaIaDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task Ia_DameSinopsisAsync(int registroId, string nif)
        {
            return Ia_DameSinopsisAsync(registroId, nif, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task Ia_DameSinopsisAsync(int registroId, string nif, System.Threading.CancellationToken cancellationToken)
        {
            if (registroId == null)
                throw new System.ArgumentNullException("registroId");

            if (nif == null)
                throw new System.ArgumentNullException("nif");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/Ia/DameSinopsis"
                    urlBuilder_.Append("api/Ia/DameSinopsis");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("registroId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(registroId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("nif")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(nif, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<RespuestaIaDto> Ia_DameResumenDocumentoAsync(int registroId, int anexoId, string nif)
        {
            return Ia_DameResumenDocumentoAsync(registroId, anexoId, nif, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RespuestaIaDto> Ia_DameResumenDocumentoAsync(int registroId, int anexoId, string nif, System.Threading.CancellationToken cancellationToken)
        {
            if (registroId == null)
                throw new System.ArgumentNullException("registroId");

            if (anexoId == null)
                throw new System.ArgumentNullException("anexoId");

            if (nif == null)
                throw new System.ArgumentNullException("nif");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/Ia/DameResumenDocumento"
                    urlBuilder_.Append("api/Ia/DameResumenDocumento");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("registroId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(registroId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("anexoId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(anexoId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("nif")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(nif, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RespuestaIaDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<RespuestaIaDto> Ia_DameResumenDocumento2Async(int registroId, int anexoId, string nif)
        {
            return Ia_DameResumenDocumento2Async(registroId, anexoId, nif, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RespuestaIaDto> Ia_DameResumenDocumento2Async(int registroId, int anexoId, string nif, System.Threading.CancellationToken cancellationToken)
        {
            if (registroId == null)
                throw new System.ArgumentNullException("registroId");

            if (anexoId == null)
                throw new System.ArgumentNullException("anexoId");

            if (nif == null)
                throw new System.ArgumentNullException("nif");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/Ia"
                    urlBuilder_.Append("api/Ia");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("registroId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(registroId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("anexoId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(anexoId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("nif")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(nif, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RespuestaIaDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<RespostaRegistre> Mux_PostValueAsync(object peticion)
        {
            return Mux_PostValueAsync(peticion, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RespostaRegistre> Mux_PostValueAsync(object peticion, System.Threading.CancellationToken cancellationToken)
        {
            if (peticion == null)
                throw new System.ArgumentNullException("peticion");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/mux"
                    urlBuilder_.Append("api/mux");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("peticion")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(peticion, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RespostaRegistre>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<string> ReadAsStringAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
#if NET5_0_OR_GREATER
            return content.ReadAsStringAsync(cancellationToken);
#else
            return content.ReadAsStringAsync();
#endif
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<System.IO.Stream> ReadAsStreamAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
#if NET5_0_OR_GREATER
            return content.ReadAsStreamAsync(cancellationToken);
#else
            return content.ReadAsStreamAsync();
#endif
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await ReadAsStringAsync(response.Content, cancellationToken).ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await ReadAsStreamAsync(response.Content, cancellationToken).ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool)
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CiudadanoEditViewModel
    {

        /// <summary>
        /// Identificador único del ciudadano. Se genera automáticamente en base de datos
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        /// <summary>
        /// Identificador de la entidad a la que pertenece
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entidadId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string EntidadId { get; set; }

        /// <summary>
        /// Antiguo identificador único del usuario a nivel de entidad. En desuso se eliminará en próximas versiones
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ciudadanoOld", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CiudadanoOld { get; set; }

        /// <summary>
        /// Nombre y apellidos o razón social
        /// </summary>
        [Newtonsoft.Json.JsonProperty("apeNomBus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(250)]
        public string ApeNomBus { get; set; }

        /// <summary>
        /// Fecha en la que se asignó la fecha principal
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaAsigDirPpal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaAsigDirPpal { get; set; }

        /// <summary>
        /// Fecha de alta en la que se creó el ciudadano
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaAlta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaAlta { get; set; }

        /// <summary>
        /// Campo abierto que ayude a identificar la procedencia del ciudadano. Podría ser el nombre de una aplicación, remesa de actualización, etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("refProcedencia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string RefProcedencia { get; set; }

        [Newtonsoft.Json.JsonProperty("esAlta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EsAlta { get; set; }

        [Newtonsoft.Json.JsonProperty("motivoAsigDirPpal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MotivoAsigDirPpalEditViewModel MotivoAsigDirPpal { get; set; }

        /// <summary>
        /// Domicilio marcado como principal del ciudadano
        /// </summary>
        [Newtonsoft.Json.JsonProperty("domPrincipal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DomCiudadanoEditViewModel DomPrincipal { get; set; }

        /// <summary>
        /// Domicilios del ciudadano
        /// </summary>
        [Newtonsoft.Json.JsonProperty("domCiudadanos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DomCiudadanoEditViewModel> DomCiudadanos { get; set; }

        /// <summary>
        /// Procedencia del ciudadano. Ayuda a identificar la herramienta con la que se hizo el alta en caso de que no haya sido con SERES.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("procedencia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProcedenciaEditViewModel Procedencia { get; set; }

        /// <summary>
        /// Ciudadanos a los que representa.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("representados", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RepresentanteEditViewModel> Representados { get; set; }

        /// <summary>
        /// Documento del ciudadano. Puede ser un pasaporte, cif, etc. El nombre se mantiene por retrocompatibilidad.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nif", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nif { get; set; }

        /// <summary>
        /// Identificador del domicilio principal del ciudadano
        /// </summary>
        [Newtonsoft.Json.JsonProperty("domCiudadanoPrincipalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DomCiudadanoPrincipalId { get; set; }

        /// <summary>
        /// Nombre de pila del ciudadano. Personas físicas
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nombre", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\D*$")]
        public string Nombre { get; set; }

        /// <summary>
        /// Primer apellido del ciudadano. Personas físicas
        /// </summary>
        [Newtonsoft.Json.JsonProperty("apellido1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\D*$")]
        public string Apellido1 { get; set; }

        /// <summary>
        /// Segundo apellido del ciudadano. Personas físicas
        /// </summary>
        [Newtonsoft.Json.JsonProperty("apellido2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\D*$")]
        public string Apellido2 { get; set; }

        /// <summary>
        /// Nombre compuesto del ciudadano en caso de personas físicas. Razón social o descripción para otros casos
        /// </summary>
        [Newtonsoft.Json.JsonProperty("apellidoNombre", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(250)]
        public string ApellidoNombre { get; set; }

        /// <summary>
        /// Tipo de persona del ciudadano
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personalidad", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CiudadanoEditViewModelPersonalidad? Personalidad { get; set; }

        /// <summary>
        /// Campo abierto para comentarios u observaciones sobre ciudadano
        /// </summary>
        [Newtonsoft.Json.JsonProperty("observaciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1024)]
        public string Observaciones { get; set; }

        /// <summary>
        /// Procedencia del ciudadano. Ayuda a identificar la herramienta con la que se hizo el alta en caso de que no haya sido con SERES.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("procedenciaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(9)]
        public string ProcedenciaId { get; set; }

        /// <summary>
        /// Acepta ser notificado electrónicamente. Obligatorio para personas jurídicas.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notElectronica", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NotElectronica { get; set; }

        /// <summary>
        /// La especificación RFC 4646:2006 proporciona una sintaxis para construir
        /// <br/>descripciones de idioma utilizando los códigos de lengua de ISO 639, los códigos
        /// <br/>de país de ISO 3166 y los códigos de escritura de ISO 15924.
        /// <br/>Se utilizará la codificación de dos caracteres(Alpha 2 – code ISO 639-1, ISO 3166-1)
        /// <br/>para la especificación de los códigos de lengua y país:
        /// <br/>Véase: http://www.ietf.org/rfc/rfc4646.txt.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idiomaComunicaciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdiomaComunicaciones { get; set; }

        /// <summary>
        /// Fecha de nacimiento para personas físicas o creación de la persona jurídica
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaNacimiento", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaNacimiento { get; set; }

        [Newtonsoft.Json.JsonProperty("diR3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(9)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[EALUIJGO]{1}[ACE0-9]{1}\d{7}")]
        public string DiR3 { get; set; }

        [Newtonsoft.Json.JsonProperty("correosElectronicos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CorreoElectronicoEditViewModel> CorreosElectronicos { get; set; }

        /// <summary>
        /// DEH del ciudadano
        /// </summary>
        [Newtonsoft.Json.JsonProperty("direccionesElectronicas", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DireccionElectronicaHabilitadaEditViewModel> DireccionesElectronicas { get; set; }

        /// <summary>
        /// Teléfonos del ciudadano
        /// </summary>
        [Newtonsoft.Json.JsonProperty("telefonos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TelefonoEditViewModel> Telefonos { get; set; }

        /// <summary>
        /// Domicilios del ciudadano
        /// </summary>
        [Newtonsoft.Json.JsonProperty("domicilios", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DomCiudadanoEditExternoModel> Domicilios { get; set; }

        /// <summary>
        /// Representantes del ciudadano
        /// </summary>
        [Newtonsoft.Json.JsonProperty("representantes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RepresentanteEditViewModel> Representantes { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MotivoAsigDirPpalEditViewModel
    {

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("abreviatura", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Abreviatura { get; set; }

        [Newtonsoft.Json.JsonProperty("descripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Descripcion { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DomCiudadanoEditViewModel
    {

        [Newtonsoft.Json.JsonProperty("entidadId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string EntidadId { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        /// <summary>
        /// 0 si no lo es. iCodCiud si lo es
        /// </summary>
        [Newtonsoft.Json.JsonProperty("esPrincipal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EsPrincipal { get; set; }

        [Newtonsoft.Json.JsonProperty("lEsPrincipal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? LEsPrincipal { get; set; }

        [Newtonsoft.Json.JsonProperty("calle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Calle { get; set; }

        [Newtonsoft.Json.JsonProperty("direccionSinSufijos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DireccionSinSufijos { get; set; }

        [Newtonsoft.Json.JsonProperty("procedenciaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcedenciaId { get; set; }

        [Newtonsoft.Json.JsonProperty("crefprocedencia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string Crefprocedencia { get; set; }

        [Newtonsoft.Json.JsonProperty("fechaAlta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaAlta { get; set; }

        [Newtonsoft.Json.JsonProperty("fechaFinDirPpal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaFinDirPpal { get; set; }

        [Newtonsoft.Json.JsonProperty("ciudadanoId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CiudadanoId { get; set; }

        [Newtonsoft.Json.JsonProperty("esAlta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EsAlta { get; set; }

        [Newtonsoft.Json.JsonProperty("usuarioUltModif", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UsuarioUltModif { get; set; }

        [Newtonsoft.Json.JsonProperty("procedencia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProcedenciaEditViewModel Procedencia { get; set; }

        [Newtonsoft.Json.JsonProperty("fechaUltModif", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaUltModif { get; set; }

        /// <summary>
        /// Código del país. Consiste en 66XXXY. Donde XXX es el código del país (108 para España) e Y es el código de control (6 para España)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("codPais", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string CodPais { get; set; }

        /// <summary>
        /// Código postal
        /// </summary>
        [Newtonsoft.Json.JsonProperty("codPostal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]*$")]
        public string CodPostal { get; set; }

        /// <summary>
        /// Descripción del municipio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("municipioDescripcion", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(60)]
        public string MunicipioDescripcion { get; set; }

        /// <summary>
        /// Descripción del país
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paisDescripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string PaisDescripcion { get; set; }

        /// <summary>
        /// Descripción de la provincia
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provinciaDescripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string ProvinciaDescripcion { get; set; }

        /// <summary>
        /// Dirección completa del ciudadano.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("direccion", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Direccion { get; set; }

        /// <summary>
        /// Escalera, piso y puerta
        /// </summary>
        [Newtonsoft.Json.JsonProperty("escPisPue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string EscPisPue { get; set; }

        /// <summary>
        /// Número/KM de la vía
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numVia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string NumVia { get; set; }

        /// <summary>
        /// Campo abierto para observaciones
        /// </summary>
        [Newtonsoft.Json.JsonProperty("observaciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Observaciones { get; set; }

        /// <summary>
        /// En desuso. Se mantiene por retrocompatibilidad
        /// </summary>
        [Newtonsoft.Json.JsonProperty("excluido", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Excluido { get; set; }

        [Newtonsoft.Json.JsonProperty("direccionYMunicipio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DireccionYMunicipio { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProcedenciaEditViewModel
    {

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("abreviatura", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Abreviatura { get; set; }

        [Newtonsoft.Json.JsonProperty("descripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Descripcion { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RepresentanteEditViewModel
    {

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("ciudadanoRepresentadoId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CiudadanoRepresentadoId { get; set; }

        [Newtonsoft.Json.JsonProperty("ciudadanoRepresentanteId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CiudadanoRepresentanteId { get; set; }

        [Newtonsoft.Json.JsonProperty("procedenciaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcedenciaId { get; set; }

        [Newtonsoft.Json.JsonProperty("esAlta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EsAlta { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CorreoElectronicoEditViewModel
    {

        /// <summary>
        /// Identificador único. Generado por la base de datos
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        /// <summary>
        /// Correo electrónico
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(160)]
        public string Email { get; set; }

        /// <summary>
        /// En el caso de haber varios y no se haya indicado será la escogida
        /// </summary>
        [Newtonsoft.Json.JsonProperty("predeterminado", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Predeterminado { get; set; }

        /// <summary>
        /// En desuso
        /// </summary>
        [Newtonsoft.Json.JsonProperty("excluido", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Excluido { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DireccionElectronicaHabilitadaEditViewModel
    {

        /// <summary>
        /// Identificador único. Generado por la base de datos
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        /// <summary>
        /// Dirección electrónica habilitada
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deh", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[a-zA-Z0-9_]{1}[0-9]{7}[a-zA-Z0-9_]{1}[a-zA-Z]{3}$")]
        public string Deh { get; set; }

        /// <summary>
        /// DEH predeterminado
        /// </summary>
        [Newtonsoft.Json.JsonProperty("predeterminado", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Predeterminado { get; set; }

        /// <summary>
        /// En desuso. Se mantiene por retrocompatibilidad
        /// </summary>
        [Newtonsoft.Json.JsonProperty("excluido", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Excluido { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TelefonoEditViewModel
    {

        /// <summary>
        /// Identificador único. Generado por la base de datos
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        /// <summary>
        /// Número de teléfono
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nTelefono", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string NTelefono { get; set; }

        /// <summary>
        /// Tipo de teléfono (móvil, fijo, etc)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tipo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TelefonoEditViewModelTipo? Tipo { get; set; }

        [Newtonsoft.Json.JsonProperty("predeterminado", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Predeterminado { get; set; }

        [Newtonsoft.Json.JsonProperty("excluido", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Excluido { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DomCiudadanoEditExternoModel
    {

        /// <summary>
        /// Identificador único del domicilio. Generado por la base de datos
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        /// <summary>
        /// Entidad a la que pertenece el ciudadano del domicilio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entidadId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string EntidadId { get; set; }

        /// <summary>
        /// Código del país. Consiste en 66XXXY. Donde XXX es el código del país (108 para España) e Y es el código de control (6 para España)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("codPais", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string CodPais { get; set; }

        /// <summary>
        /// Código postal
        /// </summary>
        [Newtonsoft.Json.JsonProperty("codPostal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]*$")]
        public string CodPostal { get; set; }

        /// <summary>
        /// Descripción del municipio
        /// </summary>
        [Newtonsoft.Json.JsonProperty("municipioDescripcion", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(60)]
        public string MunicipioDescripcion { get; set; }

        /// <summary>
        /// Descripción del país
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paisDescripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string PaisDescripcion { get; set; }

        /// <summary>
        /// Descripción de la provincia
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provinciaDescripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string ProvinciaDescripcion { get; set; }

        /// <summary>
        /// Dirección completa del ciudadano.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("direccion", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Direccion { get; set; }

        /// <summary>
        /// Escalera, piso y puerta
        /// </summary>
        [Newtonsoft.Json.JsonProperty("escPisPue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string EscPisPue { get; set; }

        /// <summary>
        /// Número/KM de la vía
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numVia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string NumVia { get; set; }

        /// <summary>
        /// Campo abierto para observaciones
        /// </summary>
        [Newtonsoft.Json.JsonProperty("observaciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string Observaciones { get; set; }

        /// <summary>
        /// En desuso. Se mantiene por retrocompatibilidad
        /// </summary>
        [Newtonsoft.Json.JsonProperty("excluido", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Excluido { get; set; }

        [Newtonsoft.Json.JsonProperty("direccionYMunicipio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DireccionYMunicipio { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CiudadanoViewModel
    {

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("nif", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nif { get; set; }

        [Newtonsoft.Json.JsonProperty("nombre", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nombre { get; set; }

        [Newtonsoft.Json.JsonProperty("apellido1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Apellido1 { get; set; }

        [Newtonsoft.Json.JsonProperty("apellido2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Apellido2 { get; set; }

        [Newtonsoft.Json.JsonProperty("apellidoNombre", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApellidoNombre { get; set; }

        [Newtonsoft.Json.JsonProperty("personalidad", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CiudadanoViewModelPersonalidad? Personalidad { get; set; }

        [Newtonsoft.Json.JsonProperty("tipoPersona", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TipoPersonaDetalles TipoPersona { get; set; }

        [Newtonsoft.Json.JsonProperty("notElectronica", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NotElectronica { get; set; }

        [Newtonsoft.Json.JsonProperty("correoElectronicoPrincipal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CorreoElectronicoPrincipal { get; set; }

        [Newtonsoft.Json.JsonProperty("telefonoPrincipal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TelefonoPrincipal { get; set; }

        [Newtonsoft.Json.JsonProperty("procedencia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Procedencia { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TipoPersonaDetalles
    {

        [Newtonsoft.Json.JsonProperty("descripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Descripcion { get; set; }

        [Newtonsoft.Json.JsonProperty("icono", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Icono { get; set; }

        [Newtonsoft.Json.JsonProperty("esFisica", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EsFisica { get; set; }

        [Newtonsoft.Json.JsonProperty("unicode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Unicode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactosCompletosCiudadanoDto
    {

        [Newtonsoft.Json.JsonProperty("domicilios", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DomCiudadanoDto> Domicilios { get; set; }

        [Newtonsoft.Json.JsonProperty("telefonos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TelefonoDto> Telefonos { get; set; }

        [Newtonsoft.Json.JsonProperty("correosElectronicos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CorreoElectronicoDto> CorreosElectronicos { get; set; }

        [Newtonsoft.Json.JsonProperty("direccionesElectronicas", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DireccionElectronicaHabilitadaDto> DireccionesElectronicas { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("nif", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nif { get; set; }

        [Newtonsoft.Json.JsonProperty("nombre", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nombre { get; set; }

        [Newtonsoft.Json.JsonProperty("apellido1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Apellido1 { get; set; }

        [Newtonsoft.Json.JsonProperty("apellido2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Apellido2 { get; set; }

        [Newtonsoft.Json.JsonProperty("apellidoNombre", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApellidoNombre { get; set; }

        [Newtonsoft.Json.JsonProperty("personalidad", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContactosCompletosCiudadanoDtoPersonalidad? Personalidad { get; set; }

        [Newtonsoft.Json.JsonProperty("tipoPersona", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TipoPersonaDetalles TipoPersona { get; set; }

        [Newtonsoft.Json.JsonProperty("notElectronica", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NotElectronica { get; set; }

        [Newtonsoft.Json.JsonProperty("correoElectronicoPrincipal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CorreoElectronicoPrincipal { get; set; }

        [Newtonsoft.Json.JsonProperty("telefonoPrincipal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TelefonoPrincipal { get; set; }

        [Newtonsoft.Json.JsonProperty("procedencia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Procedencia { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DomCiudadanoDto
    {

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("entidadId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntidadId { get; set; }

        [Newtonsoft.Json.JsonProperty("ciudadanoId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CiudadanoId { get; set; }

        [Newtonsoft.Json.JsonProperty("procedenciaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcedenciaId { get; set; }

        [Newtonsoft.Json.JsonProperty("numVia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NumVia { get; set; }

        [Newtonsoft.Json.JsonProperty("tipoVia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TipoVia { get; set; }

        [Newtonsoft.Json.JsonProperty("nombreVia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NombreVia { get; set; }

        [Newtonsoft.Json.JsonProperty("escPisPue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EscPisPue { get; set; }

        [Newtonsoft.Json.JsonProperty("direccion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Direccion { get; set; }

        [Newtonsoft.Json.JsonProperty("codPostal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodPostal { get; set; }

        [Newtonsoft.Json.JsonProperty("codPais", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodPais { get; set; }

        [Newtonsoft.Json.JsonProperty("paisDescripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaisDescripcion { get; set; }

        [Newtonsoft.Json.JsonProperty("provinciaDescripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProvinciaDescripcion { get; set; }

        [Newtonsoft.Json.JsonProperty("municipioDescripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MunicipioDescripcion { get; set; }

        [Newtonsoft.Json.JsonProperty("unidadPoblacional", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnidadPoblacional { get; set; }

        [Newtonsoft.Json.JsonProperty("observaciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Observaciones { get; set; }

        [Newtonsoft.Json.JsonProperty("fechaAlta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaAlta { get; set; }

        [Newtonsoft.Json.JsonProperty("fechaUltModif", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaUltModif { get; set; }

        [Newtonsoft.Json.JsonProperty("usuarioUltModif", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UsuarioUltModif { get; set; }

        [Newtonsoft.Json.JsonProperty("fechaFinDirPpal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaFinDirPpal { get; set; }

        [Newtonsoft.Json.JsonProperty("refProcedencia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RefProcedencia { get; set; }

        [Newtonsoft.Json.JsonProperty("excluido", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Excluido { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TelefonoDto
    {

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("entidadId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntidadId { get; set; }

        [Newtonsoft.Json.JsonProperty("ciudadanoId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CiudadanoId { get; set; }

        [Newtonsoft.Json.JsonProperty("nTelefono", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NTelefono { get; set; }

        [Newtonsoft.Json.JsonProperty("tipo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TelefonoDtoTipo? Tipo { get; set; }

        [Newtonsoft.Json.JsonProperty("predeterminado", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Predeterminado { get; set; }

        [Newtonsoft.Json.JsonProperty("excluido", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Excluido { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CorreoElectronicoDto
    {

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("entidadId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntidadId { get; set; }

        [Newtonsoft.Json.JsonProperty("ciudadanoId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CiudadanoId { get; set; }

        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        [Newtonsoft.Json.JsonProperty("predeterminado", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Predeterminado { get; set; }

        [Newtonsoft.Json.JsonProperty("excluido", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Excluido { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DireccionElectronicaHabilitadaDto
    {

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("entidadId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntidadId { get; set; }

        [Newtonsoft.Json.JsonProperty("ciudadanoId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CiudadanoId { get; set; }

        [Newtonsoft.Json.JsonProperty("deh", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Deh { get; set; }

        [Newtonsoft.Json.JsonProperty("predeterminado", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Predeterminado { get; set; }

        [Newtonsoft.Json.JsonProperty("excluido", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Excluido { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IdDocumentoDto
    {

        [Newtonsoft.Json.JsonProperty("identificador", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Identificador { get; set; }

        [Newtonsoft.Json.JsonProperty("documento", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Documento { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CiudadanoDto
    {

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("nif", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nif { get; set; }

        [Newtonsoft.Json.JsonProperty("nombre", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nombre { get; set; }

        [Newtonsoft.Json.JsonProperty("apellido1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Apellido1 { get; set; }

        [Newtonsoft.Json.JsonProperty("apellido2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Apellido2 { get; set; }

        [Newtonsoft.Json.JsonProperty("apellidoNombre", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApellidoNombre { get; set; }

        [Newtonsoft.Json.JsonProperty("personalidad", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CiudadanoDtoPersonalidad? Personalidad { get; set; }

        [Newtonsoft.Json.JsonProperty("tipoPersona", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TipoPersonaDetalles TipoPersona { get; set; }

        [Newtonsoft.Json.JsonProperty("notElectronica", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NotElectronica { get; set; }

        [Newtonsoft.Json.JsonProperty("correoElectronicoPrincipal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CorreoElectronicoPrincipal { get; set; }

        [Newtonsoft.Json.JsonProperty("telefonoPrincipal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TelefonoPrincipal { get; set; }

        [Newtonsoft.Json.JsonProperty("procedencia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Procedencia { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NewCiudadanoDto
    {

        [Newtonsoft.Json.JsonProperty("documento", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Documento { get; set; }

        [Newtonsoft.Json.JsonProperty("nombre", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nombre { get; set; }

        [Newtonsoft.Json.JsonProperty("apellido1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Apellido1 { get; set; }

        [Newtonsoft.Json.JsonProperty("apellido2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Apellido2 { get; set; }

        [Newtonsoft.Json.JsonProperty("apellidoNombreRazonSocial", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApellidoNombreRazonSocial { get; set; }

        [Newtonsoft.Json.JsonProperty("personalidad", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NewCiudadanoDtoPersonalidad? Personalidad { get; set; }

        [Newtonsoft.Json.JsonProperty("notElectronica", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NotElectronica { get; set; }

        [Newtonsoft.Json.JsonProperty("correoElectronico", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CorreoElectronico { get; set; }

        [Newtonsoft.Json.JsonProperty("telefono", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Telefono { get; set; }

        [Newtonsoft.Json.JsonProperty("procedenciaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcedenciaId { get; set; }

        [Newtonsoft.Json.JsonProperty("refProcedencia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RefProcedencia { get; set; }

        [Newtonsoft.Json.JsonProperty("observaciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Observaciones { get; set; }

        [Newtonsoft.Json.JsonProperty("idiomaComunicaciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdiomaComunicaciones { get; set; }

        [Newtonsoft.Json.JsonProperty("fechaNacimiento", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaNacimiento { get; set; }

        [Newtonsoft.Json.JsonProperty("fechaAlta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaAlta { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RespuestaServicioWebOfCiudadanoEditViewModel
    {

        [Newtonsoft.Json.JsonProperty("resultado", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CiudadanoEditViewModel Resultado { get; set; }

        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Warnings { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CiudadanoEditDto
    {

        /// <summary>
        /// Identificador único del ciudadano. Se genera automáticamente en base de datos
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        /// <summary>
        /// Identificador de la entidad a la que pertenece
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entidadId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string EntidadId { get; set; }

        /// <summary>
        /// Antiguo identificador único del usuario a nivel de entidad. En desuso se eliminará en próximas versiones
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ciudadanoOld", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CiudadanoOld { get; set; }

        /// <summary>
        /// Documento del ciudadano. Puede ser un pasaporte, cif, etc. El nombre se mantiene por retrocompatibilidad.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nif", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nif { get; set; }

        /// <summary>
        /// Identificador del domicilio principal del ciudadano
        /// </summary>
        [Newtonsoft.Json.JsonProperty("domCiudadanoPrincipalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DomCiudadanoPrincipalId { get; set; }

        /// <summary>
        /// Nombre de pila del ciudadano. Personas físicas
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nombre", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\D*$")]
        public string Nombre { get; set; }

        /// <summary>
        /// Primer apellido del ciudadano. Personas físicas
        /// </summary>
        [Newtonsoft.Json.JsonProperty("apellido1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\D*$")]
        public string Apellido1 { get; set; }

        /// <summary>
        /// Segundo apellido del ciudadano. Personas físicas
        /// </summary>
        [Newtonsoft.Json.JsonProperty("apellido2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\D*$")]
        public string Apellido2 { get; set; }

        /// <summary>
        /// Nombre compuesto del ciudadano en caso de personas físicas. Razón social o descripción para otros casos
        /// </summary>
        [Newtonsoft.Json.JsonProperty("apellidoNombre", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(250)]
        public string ApellidoNombre { get; set; }

        /// <summary>
        /// Tipo de persona del ciudadano
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personalidad", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CiudadanoEditDtoPersonalidad? Personalidad { get; set; }

        /// <summary>
        /// Campo abierto para comentarios u observaciones sobre ciudadano
        /// </summary>
        [Newtonsoft.Json.JsonProperty("observaciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1024)]
        public string Observaciones { get; set; }

        /// <summary>
        /// Procedencia del ciudadano. Ayuda a identificar la herramienta con la que se hizo el alta en caso de que no haya sido con SERES.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("procedenciaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(9)]
        public string ProcedenciaId { get; set; }

        /// <summary>
        /// Acepta ser notificado electrónicamente. Obligatorio para personas jurídicas.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notElectronica", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NotElectronica { get; set; }

        /// <summary>
        /// La especificación RFC 4646:2006 proporciona una sintaxis para construir
        /// <br/>descripciones de idioma utilizando los códigos de lengua de ISO 639, los códigos
        /// <br/>de país de ISO 3166 y los códigos de escritura de ISO 15924.
        /// <br/>Se utilizará la codificación de dos caracteres(Alpha 2 – code ISO 639-1, ISO 3166-1)
        /// <br/>para la especificación de los códigos de lengua y país:
        /// <br/>Véase: http://www.ietf.org/rfc/rfc4646.txt.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idiomaComunicaciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdiomaComunicaciones { get; set; }

        /// <summary>
        /// Fecha de nacimiento para personas físicas o creación de la persona jurídica
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaNacimiento", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaNacimiento { get; set; }

        [Newtonsoft.Json.JsonProperty("diR3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(9)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[EALUIJGO]{1}[ACE0-9]{1}\d{7}")]
        public string DiR3 { get; set; }

        [Newtonsoft.Json.JsonProperty("correosElectronicos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CorreoElectronicoEditViewModel> CorreosElectronicos { get; set; }

        /// <summary>
        /// Teléfonos del ciudadano
        /// </summary>
        [Newtonsoft.Json.JsonProperty("telefonos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TelefonoEditDto> Telefonos { get; set; }

        /// <summary>
        /// Domicilios del ciudadano
        /// </summary>
        [Newtonsoft.Json.JsonProperty("domicilios", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DomCiudadanoEditExternoModel> Domicilios { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TelefonoEditDto
    {

        /// <summary>
        /// Identificador único. Generado por la base de datos
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        /// <summary>
        /// Número de teléfono
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nTelefono", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string NTelefono { get; set; }

        /// <summary>
        /// Tipo de teléfono (móvil, fijo, etc)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tipo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TelefonoEditDtoTipo? Tipo { get; set; }

        [Newtonsoft.Json.JsonProperty("predeterminado", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Predeterminado { get; set; }

        [Newtonsoft.Json.JsonProperty("excluido", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Excluido { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CambioPersonalidadDto
    {

        [Newtonsoft.Json.JsonProperty("entidadId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntidadId { get; set; }

        [Newtonsoft.Json.JsonProperty("ciudadanoId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CiudadanoId { get; set; }

        [Newtonsoft.Json.JsonProperty("personalidad", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CambioPersonalidadDtoPersonalidad? Personalidad { get; set; }

        [Newtonsoft.Json.JsonProperty("documento", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Documento { get; set; }

        [Newtonsoft.Json.JsonProperty("nombre", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nombre { get; set; }

        [Newtonsoft.Json.JsonProperty("apellido1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Apellido1 { get; set; }

        [Newtonsoft.Json.JsonProperty("apellido2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Apellido2 { get; set; }

        [Newtonsoft.Json.JsonProperty("nombreCompleto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NombreCompleto { get; set; }

        [Newtonsoft.Json.JsonProperty("procedenciaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcedenciaId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ParametrosAutenticacion
    {

        [Newtonsoft.Json.JsonProperty("wsSegUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WsSegUser { get; set; }

        [Newtonsoft.Json.JsonProperty("wsSegPassword", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WsSegPassword { get; set; }

        [Newtonsoft.Json.JsonProperty("wsEntidad", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WsEntidad { get; set; }

        [Newtonsoft.Json.JsonProperty("nifTramitador", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NifTramitador { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EntradaViewModel
    {

        /// <summary>
        /// Contenedores de destino para entradas y de origen para salidas
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contenedoresOrigenDestino", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContenedorDestinoViewModel> ContenedoresOrigenDestino { get; set; }

        /// <summary>
        /// Número de la factura
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numFactura", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string NumFactura { get; set; }

        /// <summary>
        /// Importe de la factura en €
        /// </summary>
        [Newtonsoft.Json.JsonProperty("importeFactura", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ImporteFactura { get; set; }

        /// <summary>
        /// Número del registro de control de facturas (SEFACE)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numeroRcf", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumeroRcf { get; set; }

        /// <summary>
        /// DIR3 de la Unidad orgánica de origen
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unidadOrigenDIR3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[EALUIJGO]{1}[ACE0-9]{1}\d{7}")]
        public string UnidadOrigenDIR3 { get; set; }

        /// <summary>
        /// Descripción de la unidad orgánica de origen
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unidadOrigenDescripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnidadOrigenDescripcion { get; set; }

        /// <summary>
        /// DIR3 de la oficina de origen
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oficinaOrigenDIR3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[EALUIJGO]{1}[ACE0-9]{1}\d{7}")]
        public string OficinaOrigenDIR3 { get; set; }

        /// <summary>
        /// Descripción de la oficina de origen
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oficinaOrigenDescripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OficinaOrigenDescripcion { get; set; }

        /// <summary>
        /// Motivo del rechazo, se usa habitualmente en SIR
        /// </summary>
        [Newtonsoft.Json.JsonProperty("motivoRechazo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string MotivoRechazo { get; set; }

        /// <summary>
        /// Motivo del rechazo, se usa habitualmente en SIR
        /// </summary>
        [Newtonsoft.Json.JsonProperty("motivoReenvio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string MotivoReenvio { get; set; }

        /// <summary>
        /// DIR3 de la Unidad orgánica de destino en caso de reenvío
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unidadDestinoDIR3Reenvio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[EALUIJGO]{1}[ACE0-9]{1}\d{7}")]
        public string UnidadDestinoDIR3Reenvio { get; set; }

        /// <summary>
        /// DEscripción de la unidad orgánica de destino en caso de reenvío
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unidadDestinoDescripcionReenvio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnidadDestinoDescripcionReenvio { get; set; }

        /// <summary>
        /// DIR3 de la oficina de destino en caso de reenvío
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oficinaDestinoDIR3Reenvio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[EALUIJGO]{1}[ACE0-9]{1}\d{7}")]
        public string OficinaDestinoDIR3Reenvio { get; set; }

        /// <summary>
        /// DEscripción de la oficina de destino en caso de reenvío
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oficinaDestinoDescripcionReenvio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OficinaDestinoDescripcionReenvio { get; set; }

        /// <summary>
        /// Tramite asociado al registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tramiteId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TramiteId { get; set; }

        /// <summary>
        /// Identificador único. Se genera autom�ticamente en base de datos
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        /// <summary>
        /// A�o del ejercicio del registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ejercicio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public string Ejercicio { get; set; }

        /// <summary>
        /// Identificador ENI al que pertenece
        /// </summary>
        [Newtonsoft.Json.JsonProperty("datosEntidadId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string DatosEntidadId { get; set; }

        /// <summary>
        /// N�mero del registro. Puede no existir para registros pendientes de registrar
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numRegistro", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumRegistro { get; set; }

        /// <summary>
        /// Tipo de registro de Entrada o Salida
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tipo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EntradaViewModelTipo? Tipo { get; set; }

        /// <summary>
        /// Resumen del registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resumen", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(254)]
        public string Resumen { get; set; }

        /// <summary>
        /// Fecha en el que se completa o actualizo el registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaCompleto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaCompleto { get; set; }

        /// <summary>
        /// Indica si FechaCompleto tiene valor
        /// </summary>
        [Newtonsoft.Json.JsonProperty("completo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Completo { get; set; }

        /// <summary>
        /// Fecha del documento asociado al registro. Usado habitualmente para gestionar la fecha de la factura asociada a un registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaDocumento", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaDocumento { get; set; }

        /// <summary>
        /// Fecha de validez del registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaValidezOrigen", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaValidezOrigen { get; set; }

        /// <summary>
        /// Indica si es un registro asociado a una factura
        /// </summary>
        [Newtonsoft.Json.JsonProperty("factura", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Factura { get; set; }

        /// <summary>
        /// Identificador del asunto asociado al registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("asuntoId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AsuntoId { get; set; }

        /// <summary>
        /// Campo abierto para observaciones o comentarios del registro por parte del tramitador
        /// </summary>
        [Newtonsoft.Json.JsonProperty("observaciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Observaciones { get; set; }

        /// <summary>
        /// Pa�s de procedencia del remitente del registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paisProc", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string PaisProc { get; set; }

        /// <summary>
        /// Provincia de procedencia del remitente del registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provProc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string ProvProc { get; set; }

        /// <summary>
        /// Municipio de procedencia del remitente del registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("muniProc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string MuniProc { get; set; }

        /// <summary>
        /// Descripci�n adicional de procedencia del remitente del registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("desAdProc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(60)]
        public string DesAdProc { get; set; }

        /// <summary>
        /// Fecha de grabaci�n. Fecha en la que se crea el registro. Se actualiza cuando al registro se le asigna el n�mero de registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaSistema", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaSistema { get; set; }

        /// <summary>
        /// Tipo de transporte del asiento
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tipoTransporteEntrada", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string TipoTransporteEntrada { get; set; }

        /// <summary>
        /// N�mero de transporte del asiento
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numTransoEntrada", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string NumTransoEntrada { get; set; }

        /// <summary>
        /// Indica si el remitente se ha completado correctamente
        /// </summary>
        [Newtonsoft.Json.JsonProperty("remitenteCompleto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RemitenteCompleto { get; set; }

        /// <summary>
        /// Indica si se ha archivado el registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("archivado", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Archivado { get; set; }

        /// <summary>
        /// NIF de la persona que archiva el registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nifArchivante", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(9)]
        public string NifArchivante { get; set; }

        /// <summary>
        /// Observaciones o comentarios que motivan el archivado del registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("archivadoObservaciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ArchivadoObservaciones { get; set; }

        /// <summary>
        /// Fecha en el que se archiv� el registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaArchivo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaArchivo { get; set; }

        /// <summary>
        /// Indica si el registro est� pendiente de firma por parte del remitente
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pdteFirma", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PdteFirma { get; set; }

        /// <summary>
        /// Registro asociado. Se usa para indicar si existe otro asiento que se ha generado o �ste ha sido generado por otro. Por ejemplo un SENIA genera un registro de salida asociado
        /// </summary>
        [Newtonsoft.Json.JsonProperty("registroAsociadoId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RegistroAsociadoId { get; set; }

        /// <summary>
        /// Tipo de la causa del archivo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tipoCausaArchivo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string TipoCausaArchivo { get; set; }

        /// <summary>
        /// Expone del remitente
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expone { get; set; }

        /// <summary>
        /// Solicita del remitente
        /// </summary>
        [Newtonsoft.Json.JsonProperty("solicita", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Solicita { get; set; }

        /// <summary>
        /// C�digo SIA asociado al registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("codigoSia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CodigoSia { get; set; }

        /// <summary>
        /// Procedencia del registro (Presencial, SIR, SENIA, Servicio web, etc.)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("procedenciaRegistro", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EntradaViewModelProcedenciaRegistro? ProcedenciaRegistro { get; set; }

        /// <summary>
        /// Identificador de procedencia del registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("procedenciaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcedenciaId { get; set; }

        /// <summary>
        /// Sufijo del remitente (entradas) o destino (salidas)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sufijoRemiteDestino", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(60)]
        public string SufijoRemiteDestino { get; set; }

        /// <summary>
        /// Si ha sido devuelto por todos los destinos
        /// </summary>
        [Newtonsoft.Json.JsonProperty("devueltoGlobal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DevueltoGlobal { get; set; }

        /// <summary>
        /// Si ha sido devuelto por alg�n destino pero no por todos
        /// </summary>
        [Newtonsoft.Json.JsonProperty("devueltoParcial", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DevueltoParcial { get; set; }

        /// <summary>
        /// DIR3 unidad org�nica de destino
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unidadDestinoDIR3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(21)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[EALUIJGO]{1}[ACE0-9]{1}\d{7}")]
        public string UnidadDestinoDIR3 { get; set; }

        /// <summary>
        /// Descripci�n unidad org�nica de destino
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unidadDestinoDescripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnidadDestinoDescripcion { get; set; }

        /// <summary>
        /// DIR3 de la oficina de destino
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oficinaDestinoDIR3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(21)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[EALUIJGO]{1}[ACE0-9]{1}\d{7}")]
        public string OficinaDestinoDIR3 { get; set; }

        /// <summary>
        /// Oficina de registro asociada al registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oficinaRegistroId", Required = Newtonsoft.Json.Required.Always)]
        public int OficinaRegistroId { get; set; }

        /// <summary>
        /// Descripci�n de la oficina de registro asociada al registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oficinaRegistroDescripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OficinaRegistroDescripcion { get; set; }

        /// <summary>
        /// Oficina de destino del registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oficinaDestinoDescripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OficinaDestinoDescripcion { get; set; }

        /// <summary>
        /// Antiguo identificador del identificador del registro. Se eliminar� en pr�ximas versiones
        /// </summary>
        [Newtonsoft.Json.JsonProperty("registroOld", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RegistroOldViewModel RegistroOld { get; set; }

        /// <summary>
        /// Si el registro proviene o se dirige al SIR tendr� asociado un registro SIR
        /// </summary>
        [Newtonsoft.Json.JsonProperty("registroSir", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RegistroSirViewModel RegistroSir { get; set; }

        /// <summary>
        /// Remites de los asientos de entrada y destinos de los registros de salida
        /// </summary>
        [Newtonsoft.Json.JsonProperty("remiteDestino", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RemiteDestinoViewModel> RemiteDestino { get; set; }

        /// <summary>
        /// Documentos anexos al registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("docAnexo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AnexoViewModel> DocAnexo { get; set; }

        /// <summary>
        /// Ciudadanos asociados a los RemiteDestino
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ciudadanosRemiteDestino", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CiudadanoEditViewModel> CiudadanosRemiteDestino { get; set; }

        /// <summary>
        /// Medio de env�o del registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("medioEnvio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EntradaViewModelMedioEnvio? MedioEnvio { get; set; }

        /// <summary>
        /// Resultado en caso de env�o
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resultadoEnvio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EntradaViewModelResultadoEnvio? ResultadoEnvio { get; set; }

        /// <summary>
        /// Observaciones/Resultado descriptivo en caso de env�o
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enviadoObservaciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EnviadoObservaciones { get; set; }

        /// <summary>
        /// Fecha en caso del env�o
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaEnvio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaEnvio { get; set; }

        /// <summary>
        /// Tipo de notificaci�n del registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notificacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EntradaViewModelNotificacion? Notificacion { get; set; }

        [Newtonsoft.Json.JsonProperty("fechaUltimaModificacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaUltimaModificacion { get; set; }

        [Newtonsoft.Json.JsonProperty("fechaUltimaModificacionSeres", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaUltimaModificacionSeres { get; set; }

        [Newtonsoft.Json.JsonProperty("fechaModificacionDatosJustificante", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaModificacionDatosJustificante { get; set; }

        /// <summary>
        /// Tipo de registro de Entrada o Salida
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tipoFirma", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EntradaViewModelTipoFirma? TipoFirma { get; set; }

        /// <summary>
        /// Información adicional del registro. No editable por los tramitadores. Puede ser cualquier cosa. Su primer uso es para los metadatos de MUX.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("informacionExtra", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InformacionExtra { get; set; }

        /// <summary>
        /// Expediente SEGEX asociado
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expedienteAsociado", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ExpedienteAsociado { get; set; }

        /// <summary>
        /// Contenido instancia electrónica
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contenidoInstanciaElectronica", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContenidoInstanciaElectronica { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContenedorDestinoViewModel
    {

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("registroId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RegistroId { get; set; }

        [Newtonsoft.Json.JsonProperty("contenedorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ContenedorId { get; set; }

        [Newtonsoft.Json.JsonProperty("devuelto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Devuelto { get; set; }

        [Newtonsoft.Json.JsonProperty("observacionesDevolucion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ObservacionesDevolucion { get; set; }

        [Newtonsoft.Json.JsonProperty("fechaLecturaTramitacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaLecturaTramitacion { get; set; }

        [Newtonsoft.Json.JsonProperty("contenedorIdPermanente", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ContenedorIdPermanente { get; set; }

        [Newtonsoft.Json.JsonProperty("nombreContenedor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NombreContenedor { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RegistroOldViewModel
    {

        [Newtonsoft.Json.JsonProperty("estaFirmado", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EstaFirmado { get; set; }

        [Newtonsoft.Json.JsonProperty("firmado", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Firmado { get; set; }

        [Newtonsoft.Json.JsonProperty("departamentoDestinoId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DepartamentoDestinoId { get; set; }

        [Newtonsoft.Json.JsonProperty("departamentoOrigenId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DepartamentoOrigenId { get; set; }

        [Newtonsoft.Json.JsonProperty("entidadDestinoId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EntidadDestinoId { get; set; }

        [Newtonsoft.Json.JsonProperty("entidadOrigenId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EntidadOrigenId { get; set; }

        [Newtonsoft.Json.JsonProperty("entidadOrigen", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EntidadRegistroOldViewModel EntidadOrigen { get; set; }

        [Newtonsoft.Json.JsonProperty("entidadDestino", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EntidadRegistroOldViewModel EntidadDestino { get; set; }

        [Newtonsoft.Json.JsonProperty("departamentoDestino", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DepartamentoViewModel DepartamentoDestino { get; set; }

        [Newtonsoft.Json.JsonProperty("departamentoOrigen", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DepartamentoViewModel DepartamentoOrigen { get; set; }

        /// <summary>
        /// Identificador único. Se genera autom�ticamente en base de datos
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        /// <summary>
        /// A�o del ejercicio del registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ejercicio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public string Ejercicio { get; set; }

        /// <summary>
        /// Identificador ENI al que pertenece
        /// </summary>
        [Newtonsoft.Json.JsonProperty("datosEntidadId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string DatosEntidadId { get; set; }

        /// <summary>
        /// N�mero del registro. Puede no existir para registros pendientes de registrar
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numRegistro", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumRegistro { get; set; }

        /// <summary>
        /// Tipo de registro de Entrada o Salida
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tipo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RegistroOldViewModelTipo? Tipo { get; set; }

        /// <summary>
        /// Resumen del registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resumen", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(254)]
        public string Resumen { get; set; }

        /// <summary>
        /// Fecha en el que se completa o actualizo el registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaCompleto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaCompleto { get; set; }

        /// <summary>
        /// Indica si FechaCompleto tiene valor
        /// </summary>
        [Newtonsoft.Json.JsonProperty("completo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Completo { get; set; }

        /// <summary>
        /// Fecha del documento asociado al registro. Usado habitualmente para gestionar la fecha de la factura asociada a un registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaDocumento", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaDocumento { get; set; }

        /// <summary>
        /// Fecha de validez del registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaValidezOrigen", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaValidezOrigen { get; set; }

        /// <summary>
        /// Indica si es un registro asociado a una factura
        /// </summary>
        [Newtonsoft.Json.JsonProperty("factura", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Factura { get; set; }

        /// <summary>
        /// Identificador del asunto asociado al registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("asuntoId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AsuntoId { get; set; }

        /// <summary>
        /// Campo abierto para observaciones o comentarios del registro por parte del tramitador
        /// </summary>
        [Newtonsoft.Json.JsonProperty("observaciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Observaciones { get; set; }

        /// <summary>
        /// Pa�s de procedencia del remitente del registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paisProc", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string PaisProc { get; set; }

        /// <summary>
        /// Provincia de procedencia del remitente del registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provProc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string ProvProc { get; set; }

        /// <summary>
        /// Municipio de procedencia del remitente del registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("muniProc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string MuniProc { get; set; }

        /// <summary>
        /// Descripci�n adicional de procedencia del remitente del registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("desAdProc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(60)]
        public string DesAdProc { get; set; }

        /// <summary>
        /// Fecha de grabaci�n. Fecha en la que se crea el registro. Se actualiza cuando al registro se le asigna el n�mero de registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaSistema", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaSistema { get; set; }

        /// <summary>
        /// Tipo de transporte del asiento
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tipoTransporteEntrada", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string TipoTransporteEntrada { get; set; }

        /// <summary>
        /// N�mero de transporte del asiento
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numTransoEntrada", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string NumTransoEntrada { get; set; }

        /// <summary>
        /// Indica si el remitente se ha completado correctamente
        /// </summary>
        [Newtonsoft.Json.JsonProperty("remitenteCompleto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RemitenteCompleto { get; set; }

        /// <summary>
        /// Indica si se ha archivado el registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("archivado", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Archivado { get; set; }

        /// <summary>
        /// NIF de la persona que archiva el registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nifArchivante", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(9)]
        public string NifArchivante { get; set; }

        /// <summary>
        /// Observaciones o comentarios que motivan el archivado del registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("archivadoObservaciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ArchivadoObservaciones { get; set; }

        /// <summary>
        /// Fecha en el que se archiv� el registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaArchivo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaArchivo { get; set; }

        /// <summary>
        /// Indica si el registro est� pendiente de firma por parte del remitente
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pdteFirma", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PdteFirma { get; set; }

        /// <summary>
        /// Registro asociado. Se usa para indicar si existe otro asiento que se ha generado o �ste ha sido generado por otro. Por ejemplo un SENIA genera un registro de salida asociado
        /// </summary>
        [Newtonsoft.Json.JsonProperty("registroAsociadoId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RegistroAsociadoId { get; set; }

        /// <summary>
        /// Tipo de la causa del archivo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tipoCausaArchivo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string TipoCausaArchivo { get; set; }

        /// <summary>
        /// Expone del remitente
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expone { get; set; }

        /// <summary>
        /// Solicita del remitente
        /// </summary>
        [Newtonsoft.Json.JsonProperty("solicita", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Solicita { get; set; }

        /// <summary>
        /// C�digo SIA asociado al registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("codigoSia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CodigoSia { get; set; }

        /// <summary>
        /// Procedencia del registro (Presencial, SIR, SENIA, Servicio web, etc.)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("procedenciaRegistro", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RegistroOldViewModelProcedenciaRegistro? ProcedenciaRegistro { get; set; }

        /// <summary>
        /// Identificador de procedencia del registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("procedenciaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcedenciaId { get; set; }

        /// <summary>
        /// Sufijo del remitente (entradas) o destino (salidas)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sufijoRemiteDestino", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(60)]
        public string SufijoRemiteDestino { get; set; }

        /// <summary>
        /// Si ha sido devuelto por todos los destinos
        /// </summary>
        [Newtonsoft.Json.JsonProperty("devueltoGlobal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DevueltoGlobal { get; set; }

        /// <summary>
        /// Si ha sido devuelto por alg�n destino pero no por todos
        /// </summary>
        [Newtonsoft.Json.JsonProperty("devueltoParcial", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DevueltoParcial { get; set; }

        /// <summary>
        /// DIR3 unidad org�nica de destino
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unidadDestinoDIR3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(21)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[EALUIJGO]{1}[ACE0-9]{1}\d{7}")]
        public string UnidadDestinoDIR3 { get; set; }

        /// <summary>
        /// Descripci�n unidad org�nica de destino
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unidadDestinoDescripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnidadDestinoDescripcion { get; set; }

        /// <summary>
        /// DIR3 de la oficina de destino
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oficinaDestinoDIR3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(21)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[EALUIJGO]{1}[ACE0-9]{1}\d{7}")]
        public string OficinaDestinoDIR3 { get; set; }

        /// <summary>
        /// Oficina de registro asociada al registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oficinaRegistroId", Required = Newtonsoft.Json.Required.Always)]
        public int OficinaRegistroId { get; set; }

        /// <summary>
        /// Descripci�n de la oficina de registro asociada al registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oficinaRegistroDescripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OficinaRegistroDescripcion { get; set; }

        /// <summary>
        /// Oficina de destino del registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oficinaDestinoDescripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OficinaDestinoDescripcion { get; set; }

        /// <summary>
        /// Antiguo identificador del identificador del registro. Se eliminar� en pr�ximas versiones
        /// </summary>
        [Newtonsoft.Json.JsonProperty("registroOld", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RegistroOldViewModel RegistroOld { get; set; }

        /// <summary>
        /// Si el registro proviene o se dirige al SIR tendr� asociado un registro SIR
        /// </summary>
        [Newtonsoft.Json.JsonProperty("registroSir", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RegistroSirViewModel RegistroSir { get; set; }

        /// <summary>
        /// Remites de los asientos de entrada y destinos de los registros de salida
        /// </summary>
        [Newtonsoft.Json.JsonProperty("remiteDestino", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RemiteDestinoViewModel> RemiteDestino { get; set; }

        /// <summary>
        /// Documentos anexos al registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("docAnexo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AnexoViewModel> DocAnexo { get; set; }

        /// <summary>
        /// Ciudadanos asociados a los RemiteDestino
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ciudadanosRemiteDestino", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CiudadanoEditViewModel> CiudadanosRemiteDestino { get; set; }

        /// <summary>
        /// Medio de env�o del registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("medioEnvio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RegistroOldViewModelMedioEnvio? MedioEnvio { get; set; }

        /// <summary>
        /// Resultado en caso de env�o
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resultadoEnvio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RegistroOldViewModelResultadoEnvio? ResultadoEnvio { get; set; }

        /// <summary>
        /// Observaciones/Resultado descriptivo en caso de env�o
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enviadoObservaciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EnviadoObservaciones { get; set; }

        /// <summary>
        /// Fecha en caso del env�o
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaEnvio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaEnvio { get; set; }

        /// <summary>
        /// Tipo de notificaci�n del registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notificacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RegistroOldViewModelNotificacion? Notificacion { get; set; }

        [Newtonsoft.Json.JsonProperty("fechaUltimaModificacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaUltimaModificacion { get; set; }

        [Newtonsoft.Json.JsonProperty("fechaUltimaModificacionSeres", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaUltimaModificacionSeres { get; set; }

        [Newtonsoft.Json.JsonProperty("fechaModificacionDatosJustificante", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaModificacionDatosJustificante { get; set; }

        /// <summary>
        /// Tipo de registro de Entrada o Salida
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tipoFirma", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RegistroOldViewModelTipoFirma? TipoFirma { get; set; }

        /// <summary>
        /// Información adicional del registro. No editable por los tramitadores. Puede ser cualquier cosa. Su primer uso es para los metadatos de MUX.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("informacionExtra", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InformacionExtra { get; set; }

        /// <summary>
        /// Expediente SEGEX asociado
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expedienteAsociado", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ExpedienteAsociado { get; set; }

        /// <summary>
        /// Contenido instancia electrónica
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contenidoInstanciaElectronica", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContenidoInstanciaElectronica { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RegistroSirViewModel
    {

        /// <summary>
        /// Identificador único de los datos SIR de un registro. Generado automáticamente por la base de datos
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        /// <summary>
        /// Identificador del registro propietario del registro SIR
        /// </summary>
        [Newtonsoft.Json.JsonProperty("registroId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RegistroId { get; set; }

        /// <summary>
        /// Indica si es una recepción o un envío
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sentidoSIR", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SentidoSIR { get; set; }

        /// <summary>
        /// Estado (mensaje intercambio): Pendiente, Envío, Reenvio, Rechazado
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estadoDatosSIR", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EstadoDatosSIR { get; set; }

        /// <summary>
        /// Estado interno SERES. No usado actualmente.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estadoSIR", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EstadoSIR { get; set; }

        /// <summary>
        /// Estado (mensaje control): ACK, Error, Confirmado
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estadoMensajesSIR", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EstadoMensajesSIR { get; set; }

        /// <summary>
        /// Indica si hubo error al crear el registro SIR recibido
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorTratarSIR", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ErrorTratarSIR { get; set; }

        /// <summary>
        /// Indica si hay documentación no digitalizada (papel u otros soportes) por recibir
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pdteDocFisica", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PdteDocFisica { get; set; }

        /// <summary>
        /// Código del asunto asociado al registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("codAsuntoDestino", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string CodAsuntoDestino { get; set; }

        /// <summary>
        /// Identificador de intercambio en la plataforma SIR
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idIntercambio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdIntercambio { get; set; }

        /// <summary>
        /// Referencia externa
        /// </summary>
        [Newtonsoft.Json.JsonProperty("referenciaExterna", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string ReferenciaExterna { get; set; }

        /// <summary>
        /// Número de expediente relacionado
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expedienteRelacionado", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string ExpedienteRelacionado { get; set; }

        /// <summary>
        /// Documentación adjunta digitalizada, en papel y otros soportes, o ambas.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("docFisica", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string DocFisica { get; set; }

        [Newtonsoft.Json.JsonProperty("estadoIntercambioId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(7)]
        public string EstadoIntercambioId { get; set; }

        [Newtonsoft.Json.JsonProperty("estadoIntercambio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EstadoIntercambioSir EstadoIntercambio { get; set; }

        [Newtonsoft.Json.JsonProperty("sirPresencialNoPresencial", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string SirPresencialNoPresencial { get; set; }

        [Newtonsoft.Json.JsonProperty("sirPresencialNoPresencialDescripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string SirPresencialNoPresencialDescripcion { get; set; }

        [Newtonsoft.Json.JsonProperty("anexosConReferenciaUnica", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string AnexosConReferenciaUnica { get; set; }

        [Newtonsoft.Json.JsonProperty("anexosConReferenciaUnicaDescripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string AnexosConReferenciaUnicaDescripcion { get; set; }

        [Newtonsoft.Json.JsonProperty("atributosAdicionales", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AtributoAdicionalRegistroSir> AtributosAdicionales { get; set; }

        [Newtonsoft.Json.JsonProperty("sirCreadaEnVista", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SirCreadaEnVista { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RemiteDestinoViewModel
    {

        [Newtonsoft.Json.JsonProperty("registroId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RegistroId { get; set; }

        [Newtonsoft.Json.JsonProperty("ciudadanoId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CiudadanoId { get; set; }

        [Newtonsoft.Json.JsonProperty("canalContacto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RemiteDestinoViewModelCanalContacto? CanalContacto { get; set; }

        [Newtonsoft.Json.JsonProperty("telefono", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Telefono { get; set; }

        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        [Newtonsoft.Json.JsonProperty("deh", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Deh { get; set; }

        [Newtonsoft.Json.JsonProperty("nif", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nif { get; set; }

        [Newtonsoft.Json.JsonProperty("nombreCompleto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NombreCompleto { get; set; }

        [Newtonsoft.Json.JsonProperty("fechaUltimaModificacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaUltimaModificacion { get; set; }

        /// <summary>
        /// Windows server 2012 no tiene el mismo formato en las fechas que windows server 2016.
        /// <br/>Esto se podrá quitar cuando todos los servers estén migrados.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaUltimaModificacionUniversal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FechaUltimaModificacionUniversal { get; set; }

        [Newtonsoft.Json.JsonProperty("remiteDestinoRepresentante", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RemiteDestinoRepresentanteViewModel RemiteDestinoRepresentante { get; set; }

        /// <summary>
        /// La especificación RFC 4646:2006 proporciona una sintaxis para construir
        /// <br/>descripciones de idioma utilizando los códigos de lengua de ISO 639, los códigos
        /// <br/>de país de ISO 3166 y los códigos de escritura de ISO 15924.
        /// <br/>Se utilizará la codificación de dos caracteres(Alpha 2 – code ISO 639-1, ISO 3166-1)
        /// <br/>para la especificación de los códigos de lengua y país:
        /// <br/>Véase: http://www.ietf.org/rfc/rfc4646.txt.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idiomaComunicaciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdiomaComunicaciones { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("oposicionInteroperabilidad", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OposicionInteroperabilidad { get; set; }

        [Newtonsoft.Json.JsonProperty("oposicionInteroperabilidadDefinido", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OposicionInteroperabilidadDefinido { get; set; }

        [Newtonsoft.Json.JsonProperty("remitedestinoOld", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RemitedestinoOld { get; set; }

        [Newtonsoft.Json.JsonProperty("domCiudadanoId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DomCiudadanoId { get; set; }

        [Newtonsoft.Json.JsonProperty("codPais", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodPais { get; set; }

        [Newtonsoft.Json.JsonProperty("codPostal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodPostal { get; set; }

        [Newtonsoft.Json.JsonProperty("municipioDescripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MunicipioDescripcion { get; set; }

        [Newtonsoft.Json.JsonProperty("paisDescripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaisDescripcion { get; set; }

        [Newtonsoft.Json.JsonProperty("provinciaDescripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProvinciaDescripcion { get; set; }

        [Newtonsoft.Json.JsonProperty("direccion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Direccion { get; set; }

        [Newtonsoft.Json.JsonProperty("escPisPue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EscPisPue { get; set; }

        [Newtonsoft.Json.JsonProperty("numVia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NumVia { get; set; }

        [Newtonsoft.Json.JsonProperty("tipoVia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TipoVia { get; set; }

        [Newtonsoft.Json.JsonProperty("nombreVia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NombreVia { get; set; }

        [Newtonsoft.Json.JsonProperty("unidadPoblacional", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnidadPoblacional { get; set; }

        [Newtonsoft.Json.JsonProperty("observaciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Observaciones { get; set; }

        [Newtonsoft.Json.JsonProperty("excluido", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Excluido { get; set; }

        [Newtonsoft.Json.JsonProperty("remiteDestino", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RemiteDestino RemiteDestino { get; set; }

        [Newtonsoft.Json.JsonProperty("iRemiteDestinoRepresentante", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IRemiteDestino IRemiteDestinoRepresentante { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AnexoViewModel
    {

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("registroId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RegistroId { get; set; }

        [Newtonsoft.Json.JsonProperty("desFichero", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(500)]
        public string DesFichero { get; set; }

        [Newtonsoft.Json.JsonProperty("fechaInclusion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaInclusion { get; set; }

        [Newtonsoft.Json.JsonProperty("idNormalizado", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string IdNormalizado { get; set; }

        [Newtonsoft.Json.JsonProperty("tipoDocAnexoId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TipoDocAnexoId { get; set; }

        [Newtonsoft.Json.JsonProperty("claseDocAnexoId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClaseDocAnexoId { get; set; }

        [Newtonsoft.Json.JsonProperty("tipoValidezDocId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TipoValidezDocId { get; set; }

        [Newtonsoft.Json.JsonProperty("extension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string Extension { get; set; }

        [Newtonsoft.Json.JsonProperty("tipoDocAnexo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TipoDocAnexoViewModel TipoDocAnexo { get; set; }

        [Newtonsoft.Json.JsonProperty("claseDocAnexo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ClaseDocAnexoViewModel ClaseDocAnexo { get; set; }

        [Newtonsoft.Json.JsonProperty("tipoValidezDocumento", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TipoValidezDocumentoViewModel TipoValidezDocumento { get; set; }

        [Newtonsoft.Json.JsonProperty("guidAnexoNuevo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GuidAnexoNuevo { get; set; }

        [Newtonsoft.Json.JsonProperty("docAnexoOld", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DocAnexoOld { get; set; }

        [Newtonsoft.Json.JsonProperty("tipoDocumentalEni", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public string TipoDocumentalEni { get; set; }

        [Newtonsoft.Json.JsonProperty("estadoElaboracionEni", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public string EstadoElaboracionEni { get; set; }

        [Newtonsoft.Json.JsonProperty("identificadorEniDocumentoOrigen", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(ES)_([A-Z])([\dA-Z])(\d{7})_(19|20)(\d{2})_(\w+)$")]
        public string IdentificadorEniDocumentoOrigen { get; set; }

        /// <summary>
        /// La especificación RFC 4646:2006 proporciona una sintaxis para construir
        /// <br/>descripciones de idioma utilizando los códigos de lengua de ISO 639, los códigos
        /// <br/>de país de ISO 3166 y los códigos de escritura de ISO 15924.
        /// <br/>Se utilizará la codificación de dos caracteres(Alpha 2 – code ISO 639-1, ISO 3166-1)
        /// <br/>para la especificación de los códigos de lengua y país:
        /// <br/>Véase: http://www.ietf.org/rfc/rfc4646.txt.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idioma", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Idioma { get; set; }

        [Newtonsoft.Json.JsonProperty("resolucionPpp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ResolucionPpp { get; set; }

        [Newtonsoft.Json.JsonProperty("peticionJuzgado", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PeticionJuzgado> PeticionJuzgado { get; set; }

        [Newtonsoft.Json.JsonProperty("origenCiudadanoAdministracion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrigenCiudadanoAdministracion { get; set; }

        /// <summary>
        /// Tamaño en bytes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tamano", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Tamano { get; set; }

        [Newtonsoft.Json.JsonProperty("atributosAdicionales", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AtributoAdicionalDocAnexo> AtributosAdicionales { get; set; }

        [Newtonsoft.Json.JsonProperty("urlSefycu", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UrlSefycu { get; set; }

        [Newtonsoft.Json.JsonProperty("estadoDescarga", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AnexoViewModelEstadoDescarga? EstadoDescarga { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EntidadRegistroOldViewModel
    {

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("descripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Descripcion { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DepartamentoViewModel
    {

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("descripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Descripcion { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EstadoIntercambioSir
    {

        [Newtonsoft.Json.JsonProperty("codigo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(7)]
        public string Codigo { get; set; }

        [Newtonsoft.Json.JsonProperty("tipoCodigo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EstadoIntercambioSirTipoCodigo? TipoCodigo { get; set; }

        [Newtonsoft.Json.JsonProperty("descripcionIntercambio", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string DescripcionIntercambio { get; set; }

        [Newtonsoft.Json.JsonProperty("descripcionAplicacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string DescripcionAplicacion { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AtributoAdicionalRegistroSir
    {

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("registroSirId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RegistroSirId { get; set; }

        [Newtonsoft.Json.JsonProperty("campo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Campo { get; set; }

        [Newtonsoft.Json.JsonProperty("valor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Valor { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RemiteDestinoRepresentanteViewModel
    {

        [Newtonsoft.Json.JsonProperty("ciudadanoId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CiudadanoId { get; set; }

        [Newtonsoft.Json.JsonProperty("canalContacto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RemiteDestinoRepresentanteViewModelCanalContacto? CanalContacto { get; set; }

        [Newtonsoft.Json.JsonProperty("telefono", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Telefono { get; set; }

        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        [Newtonsoft.Json.JsonProperty("deh", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Deh { get; set; }

        [Newtonsoft.Json.JsonProperty("nif", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nif { get; set; }

        [Newtonsoft.Json.JsonProperty("nombreCompleto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NombreCompleto { get; set; }

        [Newtonsoft.Json.JsonProperty("fechaUltimaModificacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaUltimaModificacion { get; set; }

        [Newtonsoft.Json.JsonProperty("remiteDestinoId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RemiteDestinoId { get; set; }

        [Newtonsoft.Json.JsonProperty("remitedestinoOld", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RemitedestinoOld { get; set; }

        /// <summary>
        /// No confundir con RemitedestinoOld, sirve para saber guardar quien fue el anterior representante,
        /// <br/>si lo hubo, y poder borrarlo de la lista
        /// </summary>
        [Newtonsoft.Json.JsonProperty("remiteDestinoIdAntiguo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RemiteDestinoIdAntiguo { get; set; }

        [Newtonsoft.Json.JsonProperty("domCiudadanoId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DomCiudadanoId { get; set; }

        [Newtonsoft.Json.JsonProperty("codPais", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodPais { get; set; }

        [Newtonsoft.Json.JsonProperty("codPostal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodPostal { get; set; }

        [Newtonsoft.Json.JsonProperty("municipioDescripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MunicipioDescripcion { get; set; }

        [Newtonsoft.Json.JsonProperty("paisDescripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaisDescripcion { get; set; }

        [Newtonsoft.Json.JsonProperty("provinciaDescripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProvinciaDescripcion { get; set; }

        [Newtonsoft.Json.JsonProperty("direccion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Direccion { get; set; }

        [Newtonsoft.Json.JsonProperty("escPisPue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EscPisPue { get; set; }

        [Newtonsoft.Json.JsonProperty("numVia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NumVia { get; set; }

        [Newtonsoft.Json.JsonProperty("observaciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Observaciones { get; set; }

        [Newtonsoft.Json.JsonProperty("excluido", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Excluido { get; set; }

        [Newtonsoft.Json.JsonProperty("unidadPoblacional", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnidadPoblacional { get; set; }

        [Newtonsoft.Json.JsonProperty("nombreVia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NombreVia { get; set; }

        [Newtonsoft.Json.JsonProperty("tipoVia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TipoVia { get; set; }

        /// <summary>
        /// La especificación RFC 4646:2006 proporciona una sintaxis para construir
        /// <br/>descripciones de idioma utilizando los códigos de lengua de ISO 639, los códigos
        /// <br/>de país de ISO 3166 y los códigos de escritura de ISO 15924.
        /// <br/>Se utilizará la codificación de dos caracteres(Alpha 2 – code ISO 639-1, ISO 3166-1)
        /// <br/>para la especificación de los códigos de lengua y país:
        /// <br/>Véase: http://www.ietf.org/rfc/rfc4646.txt.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idiomaComunicaciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdiomaComunicaciones { get; set; }

        [Newtonsoft.Json.JsonProperty("remiteDestinoRepresentante", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RemiteDestinoRepresentante RemiteDestinoRepresentante { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RemiteDestino
    {

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("registroId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RegistroId { get; set; }

        [Newtonsoft.Json.JsonProperty("ciudadanoId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CiudadanoId { get; set; }

        [Newtonsoft.Json.JsonProperty("remitedestinoOld", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RemitedestinoOld { get; set; }

        [Newtonsoft.Json.JsonProperty("canalContacto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RemiteDestinoCanalContacto? CanalContacto { get; set; }

        [Newtonsoft.Json.JsonProperty("nif", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Nif { get; set; }

        [Newtonsoft.Json.JsonProperty("nombreCompleto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string NombreCompleto { get; set; }

        [Newtonsoft.Json.JsonProperty("telefono", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Telefono { get; set; }

        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(160)]
        public string Email { get; set; }

        [Newtonsoft.Json.JsonProperty("deh", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(160)]
        public string Deh { get; set; }

        [Newtonsoft.Json.JsonProperty("domCiudadanoId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DomCiudadanoId { get; set; }

        [Newtonsoft.Json.JsonProperty("numVia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string NumVia { get; set; }

        [Newtonsoft.Json.JsonProperty("tipoVia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string TipoVia { get; set; }

        [Newtonsoft.Json.JsonProperty("nombreVia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string NombreVia { get; set; }

        [Newtonsoft.Json.JsonProperty("escPisPue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string EscPisPue { get; set; }

        [Newtonsoft.Json.JsonProperty("direccion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Direccion { get; set; }

        [Newtonsoft.Json.JsonProperty("codPostal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string CodPostal { get; set; }

        [Newtonsoft.Json.JsonProperty("codPais", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string CodPais { get; set; }

        [Newtonsoft.Json.JsonProperty("paisDescripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string PaisDescripcion { get; set; }

        [Newtonsoft.Json.JsonProperty("provinciaDescripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string ProvinciaDescripcion { get; set; }

        [Newtonsoft.Json.JsonProperty("municipioDescripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(250)]
        public string MunicipioDescripcion { get; set; }

        [Newtonsoft.Json.JsonProperty("unidadPoblacional", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string UnidadPoblacional { get; set; }

        [Newtonsoft.Json.JsonProperty("observaciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Observaciones { get; set; }

        [Newtonsoft.Json.JsonProperty("excluido", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Excluido { get; set; }

        [Newtonsoft.Json.JsonProperty("fechaUltimaModificacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaUltimaModificacion { get; set; }

        [Newtonsoft.Json.JsonProperty("idiomaComunicaciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(45)]
        public string IdiomaComunicaciones { get; set; }

        [Newtonsoft.Json.JsonProperty("oposicionInteroperabilidad", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OposicionInteroperabilidad { get; set; }

        [Newtonsoft.Json.JsonProperty("ciudadano", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Ciudadano Ciudadano { get; set; }

        [Newtonsoft.Json.JsonProperty("iRemiteDestinoRepresentante", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IRemiteDestino IRemiteDestinoRepresentante { get; set; }

        [Newtonsoft.Json.JsonProperty("remiteDestinoRepresentante", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RemiteDestinoRepresentante RemiteDestinoRepresentante { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IRemiteDestino
    {

        [Newtonsoft.Json.JsonProperty("ciudadanoId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CiudadanoId { get; set; }

        [Newtonsoft.Json.JsonProperty("remitedestinoOld", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RemitedestinoOld { get; set; }

        [Newtonsoft.Json.JsonProperty("canalContacto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IRemiteDestinoCanalContacto? CanalContacto { get; set; }

        [Newtonsoft.Json.JsonProperty("nif", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nif { get; set; }

        [Newtonsoft.Json.JsonProperty("nombreCompleto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NombreCompleto { get; set; }

        [Newtonsoft.Json.JsonProperty("telefono", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Telefono { get; set; }

        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        [Newtonsoft.Json.JsonProperty("deh", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Deh { get; set; }

        [Newtonsoft.Json.JsonProperty("domCiudadanoId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DomCiudadanoId { get; set; }

        [Newtonsoft.Json.JsonProperty("numVia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NumVia { get; set; }

        [Newtonsoft.Json.JsonProperty("tipoVia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TipoVia { get; set; }

        [Newtonsoft.Json.JsonProperty("nombreVia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NombreVia { get; set; }

        [Newtonsoft.Json.JsonProperty("escPisPue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EscPisPue { get; set; }

        [Newtonsoft.Json.JsonProperty("direccion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Direccion { get; set; }

        [Newtonsoft.Json.JsonProperty("codPostal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodPostal { get; set; }

        [Newtonsoft.Json.JsonProperty("codPais", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodPais { get; set; }

        [Newtonsoft.Json.JsonProperty("paisDescripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaisDescripcion { get; set; }

        [Newtonsoft.Json.JsonProperty("provinciaDescripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProvinciaDescripcion { get; set; }

        [Newtonsoft.Json.JsonProperty("municipioDescripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MunicipioDescripcion { get; set; }

        [Newtonsoft.Json.JsonProperty("unidadPoblacional", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnidadPoblacional { get; set; }

        [Newtonsoft.Json.JsonProperty("observaciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Observaciones { get; set; }

        [Newtonsoft.Json.JsonProperty("idiomaComunicaciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdiomaComunicaciones { get; set; }

        [Newtonsoft.Json.JsonProperty("excluido", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Excluido { get; set; }

        [Newtonsoft.Json.JsonProperty("fechaUltimaModificacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaUltimaModificacion { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TipoDocAnexoViewModel
    {

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("descripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Descripcion { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ClaseDocAnexoViewModel
    {

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("descripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Descripcion { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TipoValidezDocumentoViewModel
    {

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("descripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Descripcion { get; set; }

        [Newtonsoft.Json.JsonProperty("descripcionCorta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DescripcionCorta { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PeticionJuzgado
    {

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("registroId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RegistroId { get; set; }

        [Newtonsoft.Json.JsonProperty("anexoId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AnexoId { get; set; }

        [Newtonsoft.Json.JsonProperty("dir3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(9, MinimumLength = 9)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([A-Z])([\dA-Z])(\d{7})")]
        public string Dir3 { get; set; }

        [Newtonsoft.Json.JsonProperty("usuarioPeticionario", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(9)]
        public string UsuarioPeticionario { get; set; }

        [Newtonsoft.Json.JsonProperty("idExpedientePedido", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(52)]
        public string IdExpedientePedido { get; set; }

        [Newtonsoft.Json.JsonProperty("codigoSia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CodigoSia { get; set; }

        [Newtonsoft.Json.JsonProperty("expedientePedidoAno", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ExpedientePedidoAno { get; set; }

        [Newtonsoft.Json.JsonProperty("expedientePedidoFechaInicio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpedientePedidoFechaInicio { get; set; }

        [Newtonsoft.Json.JsonProperty("expedientePedidoIdInteresado", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(9)]
        public string ExpedientePedidoIdInteresado { get; set; }

        [Newtonsoft.Json.JsonProperty("procedimientoClase", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string ProcedimientoClase { get; set; }

        [Newtonsoft.Json.JsonProperty("procedimientoNumero", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProcedimientoNumero { get; set; }

        [Newtonsoft.Json.JsonProperty("procedimientoNumeroTexto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcedimientoNumeroTexto { get; set; }

        [Newtonsoft.Json.JsonProperty("procedimientoAno", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProcedimientoAno { get; set; }

        [Newtonsoft.Json.JsonProperty("nig", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string Nig { get; set; }

        [Newtonsoft.Json.JsonProperty("nigPoblacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NigPoblacion { get; set; }

        [Newtonsoft.Json.JsonProperty("nigPoblacionTexto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NigPoblacionTexto { get; set; }

        [Newtonsoft.Json.JsonProperty("nigTipoOrgano", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NigTipoOrgano { get; set; }

        [Newtonsoft.Json.JsonProperty("nigTipoOrganoTexto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NigTipoOrganoTexto { get; set; }

        [Newtonsoft.Json.JsonProperty("nigCodigoOrden", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NigCodigoOrden { get; set; }

        [Newtonsoft.Json.JsonProperty("nigAno", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NigAno { get; set; }

        [Newtonsoft.Json.JsonProperty("nigNumAsunto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NigNumAsunto { get; set; }

        [Newtonsoft.Json.JsonProperty("nigNumAsuntoTexto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NigNumAsuntoTexto { get; set; }

        [Newtonsoft.Json.JsonProperty("motivacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Motivacion { get; set; }

        [Newtonsoft.Json.JsonProperty("asunto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Asunto { get; set; }

        [Newtonsoft.Json.JsonProperty("descripcionProcedimiento", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DescripcionProcedimiento { get; set; }

        [Newtonsoft.Json.JsonProperty("descripcionOrganoJudicial", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DescripcionOrganoJudicial { get; set; }

        [Newtonsoft.Json.JsonProperty("jurisdiccion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Jurisdiccion { get; set; }

        [Newtonsoft.Json.JsonProperty("codigoSGP", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string CodigoSGP { get; set; }

        [Newtonsoft.Json.JsonProperty("codigoCTEAJE", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string CodigoCTEAJE { get; set; }

        [Newtonsoft.Json.JsonProperty("numeroAcontecimiento", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumeroAcontecimiento { get; set; }

        [Newtonsoft.Json.JsonProperty("esPieza", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EsPieza { get; set; }

        [Newtonsoft.Json.JsonProperty("codigoPieza", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string CodigoPieza { get; set; }

        [Newtonsoft.Json.JsonProperty("numeroPieza", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumeroPieza { get; set; }

        [Newtonsoft.Json.JsonProperty("numeroPiezaTexto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NumeroPiezaTexto { get; set; }

        [Newtonsoft.Json.JsonProperty("anyoPieza", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AnyoPieza { get; set; }

        [Newtonsoft.Json.JsonProperty("subindicePieza", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SubindicePieza { get; set; }

        [Newtonsoft.Json.JsonProperty("subindicePiezaTexto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubindicePiezaTexto { get; set; }

        [Newtonsoft.Json.JsonProperty("xml", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Xml { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AtributoAdicionalDocAnexo
    {

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("docAnexoId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DocAnexoId { get; set; }

        [Newtonsoft.Json.JsonProperty("campo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Campo { get; set; }

        [Newtonsoft.Json.JsonProperty("valor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Valor { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RemiteDestinoRepresentante
    {

        [Newtonsoft.Json.JsonProperty("remiteDestinoId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RemiteDestinoId { get; set; }

        [Newtonsoft.Json.JsonProperty("ciudadanoId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CiudadanoId { get; set; }

        [Newtonsoft.Json.JsonProperty("remitedestinoOld", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RemitedestinoOld { get; set; }

        [Newtonsoft.Json.JsonProperty("canalContacto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RemiteDestinoRepresentanteCanalContacto? CanalContacto { get; set; }

        [Newtonsoft.Json.JsonProperty("nif", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Nif { get; set; }

        [Newtonsoft.Json.JsonProperty("nombreCompleto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string NombreCompleto { get; set; }

        [Newtonsoft.Json.JsonProperty("telefono", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Telefono { get; set; }

        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(160)]
        public string Email { get; set; }

        [Newtonsoft.Json.JsonProperty("deh", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(160)]
        public string Deh { get; set; }

        [Newtonsoft.Json.JsonProperty("domCiudadanoId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DomCiudadanoId { get; set; }

        [Newtonsoft.Json.JsonProperty("numVia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string NumVia { get; set; }

        [Newtonsoft.Json.JsonProperty("tipoVia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string TipoVia { get; set; }

        [Newtonsoft.Json.JsonProperty("nombreVia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string NombreVia { get; set; }

        [Newtonsoft.Json.JsonProperty("escPisPue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string EscPisPue { get; set; }

        [Newtonsoft.Json.JsonProperty("direccion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Direccion { get; set; }

        [Newtonsoft.Json.JsonProperty("codPostal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string CodPostal { get; set; }

        [Newtonsoft.Json.JsonProperty("codPais", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string CodPais { get; set; }

        [Newtonsoft.Json.JsonProperty("paisDescripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string PaisDescripcion { get; set; }

        [Newtonsoft.Json.JsonProperty("provinciaDescripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string ProvinciaDescripcion { get; set; }

        [Newtonsoft.Json.JsonProperty("municipioDescripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(250)]
        public string MunicipioDescripcion { get; set; }

        [Newtonsoft.Json.JsonProperty("unidadPoblacional", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string UnidadPoblacional { get; set; }

        [Newtonsoft.Json.JsonProperty("observaciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Observaciones { get; set; }

        [Newtonsoft.Json.JsonProperty("excluido", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Excluido { get; set; }

        [Newtonsoft.Json.JsonProperty("idiomaComunicaciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(45)]
        public string IdiomaComunicaciones { get; set; }

        [Newtonsoft.Json.JsonProperty("fechaUltimaModificacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaUltimaModificacion { get; set; }

        [Newtonsoft.Json.JsonProperty("ciudadano", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Ciudadano Ciudadano { get; set; }

        [Newtonsoft.Json.JsonProperty("representado", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RemiteDestino Representado { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ciudadano
    {

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("ciudadanoOld", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CiudadanoOld { get; set; }

        [Newtonsoft.Json.JsonProperty("entidadId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string EntidadId { get; set; }

        [Newtonsoft.Json.JsonProperty("domCiudadanoPrincipalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DomCiudadanoPrincipalId { get; set; }

        [Newtonsoft.Json.JsonProperty("motivoAsigDirPpalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string MotivoAsigDirPpalId { get; set; }

        [Newtonsoft.Json.JsonProperty("procedenciaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(9)]
        public string ProcedenciaId { get; set; }

        [Newtonsoft.Json.JsonProperty("nif", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Nif { get; set; }

        [Newtonsoft.Json.JsonProperty("nombre", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string Nombre { get; set; }

        [Newtonsoft.Json.JsonProperty("apellido1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string Apellido1 { get; set; }

        [Newtonsoft.Json.JsonProperty("apellido2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string Apellido2 { get; set; }

        [Newtonsoft.Json.JsonProperty("apellidoNombre", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(250)]
        public string ApellidoNombre { get; set; }

        [Newtonsoft.Json.JsonProperty("apeNomBus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(250)]
        public string ApeNomBus { get; set; }

        [Newtonsoft.Json.JsonProperty("personalidad", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CiudadanoPersonalidad? Personalidad { get; set; }

        [Newtonsoft.Json.JsonProperty("observaciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1024)]
        public string Observaciones { get; set; }

        [Newtonsoft.Json.JsonProperty("fechaAsigDirPpal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaAsigDirPpal { get; set; }

        [Newtonsoft.Json.JsonProperty("fechaAlta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaAlta { get; set; }

        [Newtonsoft.Json.JsonProperty("notElectronica", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NotElectronica { get; set; }

        [Newtonsoft.Json.JsonProperty("refProcedencia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string RefProcedencia { get; set; }

        [Newtonsoft.Json.JsonProperty("fechaNacimiento", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaNacimiento { get; set; }

        [Newtonsoft.Json.JsonProperty("nifExtendido", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string NifExtendido { get; set; }

        [Newtonsoft.Json.JsonProperty("idiomaComunicaciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(45)]
        public string IdiomaComunicaciones { get; set; }

        [Newtonsoft.Json.JsonProperty("diR3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(9)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[EALUIJGO]{1}[ACE0-9]{1}\d{7}")]
        public string DiR3 { get; set; }

        [Newtonsoft.Json.JsonProperty("motivoAsigDirPpal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Motivoasigdirppal MotivoAsigDirPpal { get; set; }

        [Newtonsoft.Json.JsonProperty("procedencia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Procedencia Procedencia { get; set; }

        [Newtonsoft.Json.JsonProperty("domPrincipal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DomCiudadano DomPrincipal { get; set; }

        [Newtonsoft.Json.JsonProperty("correosElectronicos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CorreoElectronico> CorreosElectronicos { get; set; }

        [Newtonsoft.Json.JsonProperty("direccionesElectronicas", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DireccionElectronicaHabilitada> DireccionesElectronicas { get; set; }

        [Newtonsoft.Json.JsonProperty("telefonos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Telefono> Telefonos { get; set; }

        [Newtonsoft.Json.JsonProperty("domCiudadanos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DomCiudadano> DomCiudadanos { get; set; }

        [Newtonsoft.Json.JsonProperty("representantes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Representante> Representantes { get; set; }

        [Newtonsoft.Json.JsonProperty("representados", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Representante> Representados { get; set; }

        [Newtonsoft.Json.JsonProperty("historicos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<HistModifCiudadano> Historicos { get; set; }

        [Newtonsoft.Json.JsonProperty("remesas", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Remesa> Remesas { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Motivoasigdirppal
    {

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("abreviatura", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string Abreviatura { get; set; }

        [Newtonsoft.Json.JsonProperty("descripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(60)]
        public string Descripcion { get; set; }

        [Newtonsoft.Json.JsonProperty("ciudadanos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Ciudadano> Ciudadanos { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Procedencia
    {

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(9)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("abreviatura", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Abreviatura { get; set; }

        [Newtonsoft.Json.JsonProperty("descripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string Descripcion { get; set; }

        [Newtonsoft.Json.JsonProperty("ciudadanos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Ciudadano> Ciudadanos { get; set; }

        [Newtonsoft.Json.JsonProperty("domCiudadanos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DomCiudadano> DomCiudadanos { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DomCiudadano
    {

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("entidadId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string EntidadId { get; set; }

        [Newtonsoft.Json.JsonProperty("ciudadanoId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CiudadanoId { get; set; }

        [Newtonsoft.Json.JsonProperty("procedenciaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(9)]
        public string ProcedenciaId { get; set; }

        [Newtonsoft.Json.JsonProperty("numVia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string NumVia { get; set; }

        [Newtonsoft.Json.JsonProperty("tipoVia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string TipoVia { get; set; }

        [Newtonsoft.Json.JsonProperty("nombreVia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string NombreVia { get; set; }

        [Newtonsoft.Json.JsonProperty("escPisPue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string EscPisPue { get; set; }

        [Newtonsoft.Json.JsonProperty("direccion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Direccion { get; set; }

        [Newtonsoft.Json.JsonProperty("codPostal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string CodPostal { get; set; }

        [Newtonsoft.Json.JsonProperty("codPais", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string CodPais { get; set; }

        [Newtonsoft.Json.JsonProperty("paisDescripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string PaisDescripcion { get; set; }

        [Newtonsoft.Json.JsonProperty("provinciaDescripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string ProvinciaDescripcion { get; set; }

        [Newtonsoft.Json.JsonProperty("municipioDescripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(250)]
        public string MunicipioDescripcion { get; set; }

        [Newtonsoft.Json.JsonProperty("unidadPoblacional", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70)]
        public string UnidadPoblacional { get; set; }

        [Newtonsoft.Json.JsonProperty("observaciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Observaciones { get; set; }

        [Newtonsoft.Json.JsonProperty("fechaAlta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaAlta { get; set; }

        [Newtonsoft.Json.JsonProperty("fechaUltModif", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaUltModif { get; set; }

        [Newtonsoft.Json.JsonProperty("usuarioUltModif", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UsuarioUltModif { get; set; }

        [Newtonsoft.Json.JsonProperty("fechaFinDirPpal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaFinDirPpal { get; set; }

        [Newtonsoft.Json.JsonProperty("refProcedencia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string RefProcedencia { get; set; }

        [Newtonsoft.Json.JsonProperty("excluido", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Excluido { get; set; }

        [Newtonsoft.Json.JsonProperty("procedencia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Procedencia Procedencia { get; set; }

        [Newtonsoft.Json.JsonProperty("padreId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PadreId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CorreoElectronico
    {

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("entidadId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string EntidadId { get; set; }

        [Newtonsoft.Json.JsonProperty("ciudadanoId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CiudadanoId { get; set; }

        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(160)]
        public string Email { get; set; }

        [Newtonsoft.Json.JsonProperty("predeterminado", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Predeterminado { get; set; }

        [Newtonsoft.Json.JsonProperty("excluido", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Excluido { get; set; }

        [Newtonsoft.Json.JsonProperty("ciudadano", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Ciudadano Ciudadano { get; set; }

        [Newtonsoft.Json.JsonProperty("padreId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PadreId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DireccionElectronicaHabilitada
    {

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("entidadId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string EntidadId { get; set; }

        [Newtonsoft.Json.JsonProperty("ciudadanoId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CiudadanoId { get; set; }

        [Newtonsoft.Json.JsonProperty("deh", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(160)]
        public string Deh { get; set; }

        [Newtonsoft.Json.JsonProperty("predeterminado", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Predeterminado { get; set; }

        [Newtonsoft.Json.JsonProperty("excluido", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Excluido { get; set; }

        [Newtonsoft.Json.JsonProperty("ciudadano", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Ciudadano Ciudadano { get; set; }

        [Newtonsoft.Json.JsonProperty("padreId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PadreId { get; set; }

        [Newtonsoft.Json.JsonProperty("descripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Descripcion { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Telefono
    {

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("entidadId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string EntidadId { get; set; }

        [Newtonsoft.Json.JsonProperty("ciudadanoId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CiudadanoId { get; set; }

        [Newtonsoft.Json.JsonProperty("nTelefono", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string NTelefono { get; set; }

        [Newtonsoft.Json.JsonProperty("tipo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TelefonoTipo? Tipo { get; set; }

        [Newtonsoft.Json.JsonProperty("predeterminado", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Predeterminado { get; set; }

        [Newtonsoft.Json.JsonProperty("excluido", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Excluido { get; set; }

        [Newtonsoft.Json.JsonProperty("ciudadano", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Ciudadano Ciudadano { get; set; }

        [Newtonsoft.Json.JsonProperty("padreId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PadreId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Representante
    {

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("entidadId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string EntidadId { get; set; }

        [Newtonsoft.Json.JsonProperty("ciudadanoRepresentadoId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CiudadanoRepresentadoId { get; set; }

        [Newtonsoft.Json.JsonProperty("ciudadanoRepresentanteId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CiudadanoRepresentanteId { get; set; }

        [Newtonsoft.Json.JsonProperty("procedenciaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(9)]
        public string ProcedenciaId { get; set; }

        [Newtonsoft.Json.JsonProperty("ciudadanoRepresentante", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Ciudadano CiudadanoRepresentante { get; set; }

        [Newtonsoft.Json.JsonProperty("ciudadanoRepresentado", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Ciudadano CiudadanoRepresentado { get; set; }

        [Newtonsoft.Json.JsonProperty("procedencia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Procedencia Procedencia { get; set; }

        [Newtonsoft.Json.JsonProperty("padreId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PadreId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HistModifCiudadano
    {

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("ciudadanoId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
        public int? CiudadanoId { get; set; }

        [Newtonsoft.Json.JsonProperty("tipoModificacionCiudadanoId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string TipoModificacionCiudadanoId { get; set; }

        [Newtonsoft.Json.JsonProperty("entidadId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string EntidadId { get; set; }

        [Newtonsoft.Json.JsonProperty("nif", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Nif { get; set; }

        [Newtonsoft.Json.JsonProperty("modificacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Modificacion { get; set; }

        [Newtonsoft.Json.JsonProperty("observaciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Observaciones { get; set; }

        [Newtonsoft.Json.JsonProperty("procedencia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(9)]
        public string Procedencia { get; set; }

        [Newtonsoft.Json.JsonProperty("ciudadano", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Ciudadano Ciudadano { get; set; }

        [Newtonsoft.Json.JsonProperty("tipoModificacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TipoModificacionCiudadano TipoModificacion { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Remesa
    {

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("entidadId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string EntidadId { get; set; }

        [Newtonsoft.Json.JsonProperty("descripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(250)]
        public string Descripcion { get; set; }

        [Newtonsoft.Json.JsonProperty("fecha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Fecha { get; set; }

        [Newtonsoft.Json.JsonProperty("ciudadanos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Ciudadano> Ciudadanos { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TipoModificacionCiudadano
    {

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("descripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Descripcion { get; set; }

        [Newtonsoft.Json.JsonProperty("histModifCiudadanos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<HistModifCiudadano> HistModifCiudadanos { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SalidaViewModel
    {

        /// <summary>
        /// Contenedores de origen en salidas y de destino para entradas
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contenedoresOrigenDestino", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContenedorDestinoViewModel> ContenedoresOrigenDestino { get; set; }

        /// <summary>
        /// Registro asociado a este registro. Habitual en SENIA donde la entrada genera una salida asociada.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("registroEnvioAsociadoId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RegistroEnvioAsociadoId { get; set; }

        /// <summary>
        /// Identificador único. Se genera autom�ticamente en base de datos
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        /// <summary>
        /// A�o del ejercicio del registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ejercicio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public string Ejercicio { get; set; }

        /// <summary>
        /// Identificador ENI al que pertenece
        /// </summary>
        [Newtonsoft.Json.JsonProperty("datosEntidadId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string DatosEntidadId { get; set; }

        /// <summary>
        /// N�mero del registro. Puede no existir para registros pendientes de registrar
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numRegistro", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumRegistro { get; set; }

        /// <summary>
        /// Tipo de registro de Entrada o Salida
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tipo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SalidaViewModelTipo? Tipo { get; set; }

        /// <summary>
        /// Resumen del registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resumen", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(254)]
        public string Resumen { get; set; }

        /// <summary>
        /// Fecha en el que se completa o actualizo el registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaCompleto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaCompleto { get; set; }

        /// <summary>
        /// Indica si FechaCompleto tiene valor
        /// </summary>
        [Newtonsoft.Json.JsonProperty("completo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Completo { get; set; }

        /// <summary>
        /// Fecha del documento asociado al registro. Usado habitualmente para gestionar la fecha de la factura asociada a un registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaDocumento", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaDocumento { get; set; }

        /// <summary>
        /// Fecha de validez del registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaValidezOrigen", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaValidezOrigen { get; set; }

        /// <summary>
        /// Indica si es un registro asociado a una factura
        /// </summary>
        [Newtonsoft.Json.JsonProperty("factura", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Factura { get; set; }

        /// <summary>
        /// Identificador del asunto asociado al registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("asuntoId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AsuntoId { get; set; }

        /// <summary>
        /// Campo abierto para observaciones o comentarios del registro por parte del tramitador
        /// </summary>
        [Newtonsoft.Json.JsonProperty("observaciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Observaciones { get; set; }

        /// <summary>
        /// Pa�s de procedencia del remitente del registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paisProc", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string PaisProc { get; set; }

        /// <summary>
        /// Provincia de procedencia del remitente del registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provProc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string ProvProc { get; set; }

        /// <summary>
        /// Municipio de procedencia del remitente del registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("muniProc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string MuniProc { get; set; }

        /// <summary>
        /// Descripci�n adicional de procedencia del remitente del registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("desAdProc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(60)]
        public string DesAdProc { get; set; }

        /// <summary>
        /// Fecha de grabaci�n. Fecha en la que se crea el registro. Se actualiza cuando al registro se le asigna el n�mero de registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaSistema", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaSistema { get; set; }

        /// <summary>
        /// Tipo de transporte del asiento
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tipoTransporteEntrada", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string TipoTransporteEntrada { get; set; }

        /// <summary>
        /// N�mero de transporte del asiento
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numTransoEntrada", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string NumTransoEntrada { get; set; }

        /// <summary>
        /// Indica si el remitente se ha completado correctamente
        /// </summary>
        [Newtonsoft.Json.JsonProperty("remitenteCompleto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RemitenteCompleto { get; set; }

        /// <summary>
        /// Indica si se ha archivado el registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("archivado", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Archivado { get; set; }

        /// <summary>
        /// NIF de la persona que archiva el registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nifArchivante", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(9)]
        public string NifArchivante { get; set; }

        /// <summary>
        /// Observaciones o comentarios que motivan el archivado del registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("archivadoObservaciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ArchivadoObservaciones { get; set; }

        /// <summary>
        /// Fecha en el que se archiv� el registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaArchivo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaArchivo { get; set; }

        /// <summary>
        /// Indica si el registro est� pendiente de firma por parte del remitente
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pdteFirma", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PdteFirma { get; set; }

        /// <summary>
        /// Registro asociado. Se usa para indicar si existe otro asiento que se ha generado o �ste ha sido generado por otro. Por ejemplo un SENIA genera un registro de salida asociado
        /// </summary>
        [Newtonsoft.Json.JsonProperty("registroAsociadoId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RegistroAsociadoId { get; set; }

        /// <summary>
        /// Tipo de la causa del archivo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tipoCausaArchivo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string TipoCausaArchivo { get; set; }

        /// <summary>
        /// Expone del remitente
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expone { get; set; }

        /// <summary>
        /// Solicita del remitente
        /// </summary>
        [Newtonsoft.Json.JsonProperty("solicita", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Solicita { get; set; }

        /// <summary>
        /// C�digo SIA asociado al registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("codigoSia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CodigoSia { get; set; }

        /// <summary>
        /// Procedencia del registro (Presencial, SIR, SENIA, Servicio web, etc.)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("procedenciaRegistro", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SalidaViewModelProcedenciaRegistro? ProcedenciaRegistro { get; set; }

        /// <summary>
        /// Identificador de procedencia del registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("procedenciaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcedenciaId { get; set; }

        /// <summary>
        /// Sufijo del remitente (entradas) o destino (salidas)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sufijoRemiteDestino", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(60)]
        public string SufijoRemiteDestino { get; set; }

        /// <summary>
        /// Si ha sido devuelto por todos los destinos
        /// </summary>
        [Newtonsoft.Json.JsonProperty("devueltoGlobal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DevueltoGlobal { get; set; }

        /// <summary>
        /// Si ha sido devuelto por alg�n destino pero no por todos
        /// </summary>
        [Newtonsoft.Json.JsonProperty("devueltoParcial", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DevueltoParcial { get; set; }

        /// <summary>
        /// DIR3 unidad org�nica de destino
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unidadDestinoDIR3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(21)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[EALUIJGO]{1}[ACE0-9]{1}\d{7}")]
        public string UnidadDestinoDIR3 { get; set; }

        /// <summary>
        /// Descripci�n unidad org�nica de destino
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unidadDestinoDescripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnidadDestinoDescripcion { get; set; }

        /// <summary>
        /// DIR3 de la oficina de destino
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oficinaDestinoDIR3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(21)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[EALUIJGO]{1}[ACE0-9]{1}\d{7}")]
        public string OficinaDestinoDIR3 { get; set; }

        /// <summary>
        /// Oficina de registro asociada al registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oficinaRegistroId", Required = Newtonsoft.Json.Required.Always)]
        public int OficinaRegistroId { get; set; }

        /// <summary>
        /// Descripci�n de la oficina de registro asociada al registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oficinaRegistroDescripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OficinaRegistroDescripcion { get; set; }

        /// <summary>
        /// Oficina de destino del registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oficinaDestinoDescripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OficinaDestinoDescripcion { get; set; }

        /// <summary>
        /// Antiguo identificador del identificador del registro. Se eliminar� en pr�ximas versiones
        /// </summary>
        [Newtonsoft.Json.JsonProperty("registroOld", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RegistroOldViewModel RegistroOld { get; set; }

        /// <summary>
        /// Si el registro proviene o se dirige al SIR tendr� asociado un registro SIR
        /// </summary>
        [Newtonsoft.Json.JsonProperty("registroSir", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RegistroSirViewModel RegistroSir { get; set; }

        /// <summary>
        /// Remites de los asientos de entrada y destinos de los registros de salida
        /// </summary>
        [Newtonsoft.Json.JsonProperty("remiteDestino", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RemiteDestinoViewModel> RemiteDestino { get; set; }

        /// <summary>
        /// Documentos anexos al registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("docAnexo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AnexoViewModel> DocAnexo { get; set; }

        /// <summary>
        /// Ciudadanos asociados a los RemiteDestino
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ciudadanosRemiteDestino", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CiudadanoEditViewModel> CiudadanosRemiteDestino { get; set; }

        /// <summary>
        /// Medio de env�o del registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("medioEnvio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SalidaViewModelMedioEnvio? MedioEnvio { get; set; }

        /// <summary>
        /// Resultado en caso de env�o
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resultadoEnvio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SalidaViewModelResultadoEnvio? ResultadoEnvio { get; set; }

        /// <summary>
        /// Observaciones/Resultado descriptivo en caso de env�o
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enviadoObservaciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EnviadoObservaciones { get; set; }

        /// <summary>
        /// Fecha en caso del env�o
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaEnvio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaEnvio { get; set; }

        /// <summary>
        /// Tipo de notificaci�n del registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notificacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SalidaViewModelNotificacion? Notificacion { get; set; }

        [Newtonsoft.Json.JsonProperty("fechaUltimaModificacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaUltimaModificacion { get; set; }

        [Newtonsoft.Json.JsonProperty("fechaUltimaModificacionSeres", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaUltimaModificacionSeres { get; set; }

        [Newtonsoft.Json.JsonProperty("fechaModificacionDatosJustificante", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaModificacionDatosJustificante { get; set; }

        /// <summary>
        /// Tipo de registro de Entrada o Salida
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tipoFirma", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SalidaViewModelTipoFirma? TipoFirma { get; set; }

        /// <summary>
        /// Información adicional del registro. No editable por los tramitadores. Puede ser cualquier cosa. Su primer uso es para los metadatos de MUX.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("informacionExtra", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InformacionExtra { get; set; }

        /// <summary>
        /// Expediente SEGEX asociado
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expedienteAsociado", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ExpedienteAsociado { get; set; }

        /// <summary>
        /// Contenido instancia electrónica
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contenidoInstanciaElectronica", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContenidoInstanciaElectronica { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EntradaSalidaViewModel
    {

        /// <summary>
        /// Identificador único. Se genera autom�ticamente en base de datos
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        /// <summary>
        /// A�o del ejercicio del registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ejercicio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public string Ejercicio { get; set; }

        /// <summary>
        /// Identificador ENI al que pertenece
        /// </summary>
        [Newtonsoft.Json.JsonProperty("datosEntidadId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string DatosEntidadId { get; set; }

        /// <summary>
        /// N�mero del registro. Puede no existir para registros pendientes de registrar
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numRegistro", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumRegistro { get; set; }

        /// <summary>
        /// Tipo de registro de Entrada o Salida
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tipo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EntradaSalidaViewModelTipo? Tipo { get; set; }

        /// <summary>
        /// Resumen del registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resumen", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(254)]
        public string Resumen { get; set; }

        /// <summary>
        /// Fecha en el que se completa o actualizo el registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaCompleto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaCompleto { get; set; }

        /// <summary>
        /// Indica si FechaCompleto tiene valor
        /// </summary>
        [Newtonsoft.Json.JsonProperty("completo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Completo { get; set; }

        /// <summary>
        /// Fecha del documento asociado al registro. Usado habitualmente para gestionar la fecha de la factura asociada a un registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaDocumento", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaDocumento { get; set; }

        /// <summary>
        /// Fecha de validez del registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaValidezOrigen", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaValidezOrigen { get; set; }

        /// <summary>
        /// Indica si es un registro asociado a una factura
        /// </summary>
        [Newtonsoft.Json.JsonProperty("factura", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Factura { get; set; }

        /// <summary>
        /// Identificador del asunto asociado al registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("asuntoId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AsuntoId { get; set; }

        /// <summary>
        /// Campo abierto para observaciones o comentarios del registro por parte del tramitador
        /// </summary>
        [Newtonsoft.Json.JsonProperty("observaciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Observaciones { get; set; }

        /// <summary>
        /// Pa�s de procedencia del remitente del registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paisProc", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string PaisProc { get; set; }

        /// <summary>
        /// Provincia de procedencia del remitente del registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provProc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string ProvProc { get; set; }

        /// <summary>
        /// Municipio de procedencia del remitente del registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("muniProc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string MuniProc { get; set; }

        /// <summary>
        /// Descripci�n adicional de procedencia del remitente del registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("desAdProc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(60)]
        public string DesAdProc { get; set; }

        /// <summary>
        /// Fecha de grabaci�n. Fecha en la que se crea el registro. Se actualiza cuando al registro se le asigna el n�mero de registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaSistema", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaSistema { get; set; }

        /// <summary>
        /// Tipo de transporte del asiento
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tipoTransporteEntrada", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string TipoTransporteEntrada { get; set; }

        /// <summary>
        /// N�mero de transporte del asiento
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numTransoEntrada", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string NumTransoEntrada { get; set; }

        /// <summary>
        /// Indica si el remitente se ha completado correctamente
        /// </summary>
        [Newtonsoft.Json.JsonProperty("remitenteCompleto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RemitenteCompleto { get; set; }

        /// <summary>
        /// Indica si se ha archivado el registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("archivado", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Archivado { get; set; }

        /// <summary>
        /// NIF de la persona que archiva el registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nifArchivante", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(9)]
        public string NifArchivante { get; set; }

        /// <summary>
        /// Observaciones o comentarios que motivan el archivado del registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("archivadoObservaciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ArchivadoObservaciones { get; set; }

        /// <summary>
        /// Fecha en el que se archiv� el registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaArchivo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaArchivo { get; set; }

        /// <summary>
        /// Indica si el registro est� pendiente de firma por parte del remitente
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pdteFirma", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PdteFirma { get; set; }

        /// <summary>
        /// Registro asociado. Se usa para indicar si existe otro asiento que se ha generado o �ste ha sido generado por otro. Por ejemplo un SENIA genera un registro de salida asociado
        /// </summary>
        [Newtonsoft.Json.JsonProperty("registroAsociadoId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RegistroAsociadoId { get; set; }

        /// <summary>
        /// Tipo de la causa del archivo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tipoCausaArchivo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(80)]
        public string TipoCausaArchivo { get; set; }

        /// <summary>
        /// Expone del remitente
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expone { get; set; }

        /// <summary>
        /// Solicita del remitente
        /// </summary>
        [Newtonsoft.Json.JsonProperty("solicita", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Solicita { get; set; }

        /// <summary>
        /// C�digo SIA asociado al registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("codigoSia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CodigoSia { get; set; }

        /// <summary>
        /// Procedencia del registro (Presencial, SIR, SENIA, Servicio web, etc.)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("procedenciaRegistro", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EntradaSalidaViewModelProcedenciaRegistro? ProcedenciaRegistro { get; set; }

        /// <summary>
        /// Identificador de procedencia del registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("procedenciaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcedenciaId { get; set; }

        /// <summary>
        /// Sufijo del remitente (entradas) o destino (salidas)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sufijoRemiteDestino", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(60)]
        public string SufijoRemiteDestino { get; set; }

        /// <summary>
        /// Si ha sido devuelto por todos los destinos
        /// </summary>
        [Newtonsoft.Json.JsonProperty("devueltoGlobal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DevueltoGlobal { get; set; }

        /// <summary>
        /// Si ha sido devuelto por alg�n destino pero no por todos
        /// </summary>
        [Newtonsoft.Json.JsonProperty("devueltoParcial", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DevueltoParcial { get; set; }

        /// <summary>
        /// DIR3 unidad org�nica de destino
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unidadDestinoDIR3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(21)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[EALUIJGO]{1}[ACE0-9]{1}\d{7}")]
        public string UnidadDestinoDIR3 { get; set; }

        /// <summary>
        /// Descripci�n unidad org�nica de destino
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unidadDestinoDescripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnidadDestinoDescripcion { get; set; }

        /// <summary>
        /// DIR3 de la oficina de destino
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oficinaDestinoDIR3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(21)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[EALUIJGO]{1}[ACE0-9]{1}\d{7}")]
        public string OficinaDestinoDIR3 { get; set; }

        /// <summary>
        /// Oficina de registro asociada al registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oficinaRegistroId", Required = Newtonsoft.Json.Required.Always)]
        public int OficinaRegistroId { get; set; }

        /// <summary>
        /// Descripci�n de la oficina de registro asociada al registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oficinaRegistroDescripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OficinaRegistroDescripcion { get; set; }

        /// <summary>
        /// Oficina de destino del registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oficinaDestinoDescripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OficinaDestinoDescripcion { get; set; }

        /// <summary>
        /// Antiguo identificador del identificador del registro. Se eliminar� en pr�ximas versiones
        /// </summary>
        [Newtonsoft.Json.JsonProperty("registroOld", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RegistroOldViewModel RegistroOld { get; set; }

        /// <summary>
        /// Si el registro proviene o se dirige al SIR tendr� asociado un registro SIR
        /// </summary>
        [Newtonsoft.Json.JsonProperty("registroSir", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RegistroSirViewModel RegistroSir { get; set; }

        /// <summary>
        /// Remites de los asientos de entrada y destinos de los registros de salida
        /// </summary>
        [Newtonsoft.Json.JsonProperty("remiteDestino", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RemiteDestinoViewModel> RemiteDestino { get; set; }

        /// <summary>
        /// Documentos anexos al registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("docAnexo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AnexoViewModel> DocAnexo { get; set; }

        /// <summary>
        /// Ciudadanos asociados a los RemiteDestino
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ciudadanosRemiteDestino", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CiudadanoEditViewModel> CiudadanosRemiteDestino { get; set; }

        /// <summary>
        /// Medio de env�o del registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("medioEnvio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EntradaSalidaViewModelMedioEnvio? MedioEnvio { get; set; }

        /// <summary>
        /// Resultado en caso de env�o
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resultadoEnvio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EntradaSalidaViewModelResultadoEnvio? ResultadoEnvio { get; set; }

        /// <summary>
        /// Observaciones/Resultado descriptivo en caso de env�o
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enviadoObservaciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EnviadoObservaciones { get; set; }

        /// <summary>
        /// Fecha en caso del env�o
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaEnvio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaEnvio { get; set; }

        /// <summary>
        /// Tipo de notificaci�n del registro
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notificacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EntradaSalidaViewModelNotificacion? Notificacion { get; set; }

        [Newtonsoft.Json.JsonProperty("fechaUltimaModificacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaUltimaModificacion { get; set; }

        [Newtonsoft.Json.JsonProperty("fechaUltimaModificacionSeres", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaUltimaModificacionSeres { get; set; }

        [Newtonsoft.Json.JsonProperty("fechaModificacionDatosJustificante", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaModificacionDatosJustificante { get; set; }

        /// <summary>
        /// Tipo de registro de Entrada o Salida
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tipoFirma", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EntradaSalidaViewModelTipoFirma? TipoFirma { get; set; }

        /// <summary>
        /// Información adicional del registro. No editable por los tramitadores. Puede ser cualquier cosa. Su primer uso es para los metadatos de MUX.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("informacionExtra", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InformacionExtra { get; set; }

        /// <summary>
        /// Expediente SEGEX asociado
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expedienteAsociado", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ExpedienteAsociado { get; set; }

        /// <summary>
        /// Contenido instancia electrónica
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contenidoInstanciaElectronica", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContenidoInstanciaElectronica { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HistRegistroViewModel
    {

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("numCambioOld", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumCambioOld { get; set; }

        [Newtonsoft.Json.JsonProperty("registroId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RegistroId { get; set; }

        [Newtonsoft.Json.JsonProperty("codModif", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string CodModif { get; set; }

        [Newtonsoft.Json.JsonProperty("usuario", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Usuario { get; set; }

        [Newtonsoft.Json.JsonProperty("fechaModificacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaModificacion { get; set; }

        [Newtonsoft.Json.JsonProperty("observaciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Observaciones { get; set; }

        [Newtonsoft.Json.JsonProperty("procedencia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Procedencia { get; set; }

        [Newtonsoft.Json.JsonProperty("nif", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Nif { get; set; }

        [Newtonsoft.Json.JsonProperty("modificacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ModificacionRegistroViewModel Modificacion { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ModificacionRegistroViewModel
    {

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("descripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Descripcion { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetContenidoAnexoResponse
    {

        [Newtonsoft.Json.JsonProperty("tipoRuta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GetContenidoAnexoResponseTipoRuta? TipoRuta { get; set; }

        [Newtonsoft.Json.JsonProperty("contenido", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] Contenido { get; set; }

        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        [Newtonsoft.Json.JsonProperty("csv", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Csv { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DestinoDto
    {

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("dir3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Dir3 { get; set; }

        [Newtonsoft.Json.JsonProperty("descripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Descripcion { get; set; }

        [Newtonsoft.Json.JsonProperty("abreviatura", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Abreviatura { get; set; }

        [Newtonsoft.Json.JsonProperty("esRaiz", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EsRaiz { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AsuntoDto
    {

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("descripcion", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(250)]
        public string Descripcion { get; set; }

        [Newtonsoft.Json.JsonProperty("entrada", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Entrada { get; set; }

        [Newtonsoft.Json.JsonProperty("salida", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Salida { get; set; }

        [Newtonsoft.Json.JsonProperty("contenedorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ContenedorId { get; set; }

        [Newtonsoft.Json.JsonProperty("datosEntidadId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DatosEntidadId { get; set; }

        [Newtonsoft.Json.JsonProperty("abreviatura", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Abreviatura { get; set; }

        [Newtonsoft.Json.JsonProperty("presencial", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Presencial { get; set; }

        [Newtonsoft.Json.JsonProperty("telematico", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Telematico { get; set; }

    }

    /// <summary>
    /// Petición para filtrar registros. Incluye el filtro, el orden y la página.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FilterRegistrosRequest
    {

        /// <summary>
        /// Filtros, todos opcionales, por Tipo (E/S), Ejercicio, Estado, Oficina, Factura, Archivado, Destinos/Origen por identificador,
        /// <br/>Interesados (remitentes/destinatarios por documento (NIF, NIE, CIF, etc) y los rangos de fecha de grabación, validez y completo.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filtro", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FiltroRegistroDto Filtro { get; set; }

        /// <summary>
        /// Orden de los resultados: Ascendente (True) o Descendente (False).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orden", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Orden { get; set; }

        /// <summary>
        /// Número de página de resultados (por defecto 1).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pagina", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Pagina { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FiltroRegistroDto
    {

        [Newtonsoft.Json.JsonProperty("tipo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FiltroRegistroDtoTipo? Tipo { get; set; }

        [Newtonsoft.Json.JsonProperty("ejercicio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Ejercicio { get; set; }

        [Newtonsoft.Json.JsonProperty("estado", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FiltroRegistroDtoEstado? Estado { get; set; }

        [Newtonsoft.Json.JsonProperty("oficina", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Oficina { get; set; }

        [Newtonsoft.Json.JsonProperty("factura", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Factura { get; set; }

        [Newtonsoft.Json.JsonProperty("archivado", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Archivado { get; set; }

        [Newtonsoft.Json.JsonProperty("destinosOrigen", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> DestinosOrigen { get; set; }

        [Newtonsoft.Json.JsonProperty("interesados", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Interesados { get; set; }

        [Newtonsoft.Json.JsonProperty("fechaGrabacionDesde", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaGrabacionDesde { get; set; }

        [Newtonsoft.Json.JsonProperty("fechaGrabacionHasta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaGrabacionHasta { get; set; }

        [Newtonsoft.Json.JsonProperty("fechaValidezDesde", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaValidezDesde { get; set; }

        [Newtonsoft.Json.JsonProperty("fechaValidezHasta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaValidezHasta { get; set; }

        [Newtonsoft.Json.JsonProperty("fechaCompletoDesde", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaCompletoDesde { get; set; }

        [Newtonsoft.Json.JsonProperty("fechaCompletoHasta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaCompletoHasta { get; set; }

        [Newtonsoft.Json.JsonProperty("tipoNotificacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FiltroRegistroDtoTipoNotificacion? TipoNotificacion { get; set; }

        [Newtonsoft.Json.JsonProperty("asuntoId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AsuntoId { get; set; }

        [Newtonsoft.Json.JsonProperty("tramiteId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TramiteId { get; set; }

    }

    /// <summary>
    /// Petición para filtrar registros. Incluye el filtro, el orden y la página.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FilterRegistrosRequestFormularios
    {

        /// <summary>
        /// Filtros, todos opcionales, por Tipo (E/S), Ejercicio, Estado, Oficina, Factura, Archivado, Destinos/Origen por identificador,
        /// <br/>Interesados (remitentes/destinatarios por documento (NIF, NIE, CIF, etc) y los rangos de fecha de grabación, validez y completo.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filtro", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public FiltroRegistroDto Filtro { get; set; } = new FiltroRegistroDto();

        /// <summary>
        /// Idioma de los formularios.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idioma", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Idioma { get; set; }

        /// <summary>
        /// NIF del tramitador que está realizando la petición.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nifTramitador", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NifTramitador { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EntradasFormularios
    {

        [Newtonsoft.Json.JsonProperty("formularios", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FormulariosExportacion> Formularios { get; set; }

        [Newtonsoft.Json.JsonProperty("entradas", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EntradaSeresExportacion> Entradas { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FormulariosExportacion
    {

        [Newtonsoft.Json.JsonProperty("ejercicio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Ejercicio { get; set; }

        [Newtonsoft.Json.JsonProperty("numRegistro", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumRegistro { get; set; }

        [Newtonsoft.Json.JsonProperty("colaboradores", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Colaboradores { get; set; }

        [Newtonsoft.Json.JsonProperty("tramitadores", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tramitadores { get; set; }

        [Newtonsoft.Json.JsonProperty("firmada", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Firmada { get; set; }

        [Newtonsoft.Json.JsonProperty("completa", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Completa { get; set; }

        [Newtonsoft.Json.JsonProperty("nif", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nif { get; set; }

        [Newtonsoft.Json.JsonProperty("interesado", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Interesado { get; set; }

        [Newtonsoft.Json.JsonProperty("codigoExpediente", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodigoExpediente { get; set; }

        [Newtonsoft.Json.JsonProperty("valores", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<FilaFormularioExportacion>> Valores { get; set; }

        [Newtonsoft.Json.JsonProperty("numDocsApartados", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IdDescripcion> NumDocsApartados { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EntradaSeresExportacion
    {

        [Newtonsoft.Json.JsonProperty("entidad", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Entidad { get; set; }

        [Newtonsoft.Json.JsonProperty("estado", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Estado { get; set; }

        [Newtonsoft.Json.JsonProperty("fechaEntrada", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaEntrada { get; set; }

        [Newtonsoft.Json.JsonProperty("fechaCompleta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaCompleta { get; set; }

        [Newtonsoft.Json.JsonProperty("numRegistro", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumRegistro { get; set; }

        [Newtonsoft.Json.JsonProperty("ejercicio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Ejercicio { get; set; }

        [Newtonsoft.Json.JsonProperty("resumen", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Resumen { get; set; }

        [Newtonsoft.Json.JsonProperty("pendienteDeFirma", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PendienteDeFirma { get; set; }

        [Newtonsoft.Json.JsonProperty("interesado", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Interesado { get; set; }

        [Newtonsoft.Json.JsonProperty("nombre", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nombre { get; set; }

        [Newtonsoft.Json.JsonProperty("apellido1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Apellido1 { get; set; }

        [Newtonsoft.Json.JsonProperty("apellido2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Apellido2 { get; set; }

        [Newtonsoft.Json.JsonProperty("nif", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nif { get; set; }

        [Newtonsoft.Json.JsonProperty("movil", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Movil { get; set; }

        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        [Newtonsoft.Json.JsonProperty("representante", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Representante { get; set; }

        [Newtonsoft.Json.JsonProperty("representanteMovil", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RepresentanteMovil { get; set; }

        [Newtonsoft.Json.JsonProperty("representanteCorreo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RepresentanteCorreo { get; set; }

        [Newtonsoft.Json.JsonProperty("representanteNif", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RepresentanteNif { get; set; }

        [Newtonsoft.Json.JsonProperty("codigoExpediente", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodigoExpediente { get; set; }

        [Newtonsoft.Json.JsonProperty("tienePagoPendiente", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TienePagoPendiente { get; set; }

        [Newtonsoft.Json.JsonProperty("pagos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pagos { get; set; }

        [Newtonsoft.Json.JsonProperty("tramitadores", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tramitadores { get; set; }

        [Newtonsoft.Json.JsonProperty("colaboradores", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Colaboradores { get; set; }

        [Newtonsoft.Json.JsonProperty("direccionPostal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DireccionPostal { get; set; }

        [Newtonsoft.Json.JsonProperty("casoId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CasoId { get; set; }

        [Newtonsoft.Json.JsonProperty("caso", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Caso { get; set; }

        [Newtonsoft.Json.JsonProperty("numDocs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumDocs { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FilaFormularioExportacion
    {

        [Newtonsoft.Json.JsonProperty("idFormulario", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdFormulario { get; set; }

        [Newtonsoft.Json.JsonProperty("nombreFormulario", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NombreFormulario { get; set; }

        [Newtonsoft.Json.JsonProperty("idInstanciaFormulario", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdInstanciaFormulario { get; set; }

        [Newtonsoft.Json.JsonProperty("numFila", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumFila { get; set; }

        [Newtonsoft.Json.JsonProperty("idElementoFormulario", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdElementoFormulario { get; set; }

        [Newtonsoft.Json.JsonProperty("idValorFormulario", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdValorFormulario { get; set; }

        [Newtonsoft.Json.JsonProperty("etiquetaCampo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EtiquetaCampo { get; set; }

        [Newtonsoft.Json.JsonProperty("valor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Valor { get; set; }

        [Newtonsoft.Json.JsonProperty("orden", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Orden { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IdDescripcion
    {

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("descripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Descripcion { get; set; }

    }

    /// <summary>
    /// Petición para añadir un nuevo registro.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NewRegistroRequest
    {

        /// <summary>
        /// Nuevo registro a añadir.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nuevoRegistro", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NewRegistroDto NuevoRegistro { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NewRegistroDto
    {

        [Newtonsoft.Json.JsonProperty("ejercicio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Ejercicio { get; set; }

        [Newtonsoft.Json.JsonProperty("tipo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NewRegistroDtoTipo? Tipo { get; set; }

        [Newtonsoft.Json.JsonProperty("fechaDocumento", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaDocumento { get; set; }

        [Newtonsoft.Json.JsonProperty("fechaValidezOrigen", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaValidezOrigen { get; set; }

        [Newtonsoft.Json.JsonProperty("idsRemitentes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> IdsRemitentes { get; set; }

        [Newtonsoft.Json.JsonProperty("idsRepresentantes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<NewRegistroRepresentanteDto> IdsRepresentantes { get; set; }

        [Newtonsoft.Json.JsonProperty("resumen", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Resumen { get; set; }

        [Newtonsoft.Json.JsonProperty("paisProcedencia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaisProcedencia { get; set; }

        [Newtonsoft.Json.JsonProperty("provinciaProcedencia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProvinciaProcedencia { get; set; }

        [Newtonsoft.Json.JsonProperty("municipioProcedencia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MunicipioProcedencia { get; set; }

        [Newtonsoft.Json.JsonProperty("descripcionAdicionalProcedencia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DescripcionAdicionalProcedencia { get; set; }

        [Newtonsoft.Json.JsonProperty("numeroFactura", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NumeroFactura { get; set; }

        [Newtonsoft.Json.JsonProperty("importeFactura", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ImporteFactura { get; set; }

        [Newtonsoft.Json.JsonProperty("observacionesRegistro", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ObservacionesRegistro { get; set; }

        [Newtonsoft.Json.JsonProperty("destinos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> Destinos { get; set; }

        [Newtonsoft.Json.JsonProperty("dir3Destinos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Dir3Destinos { get; set; }

        [Newtonsoft.Json.JsonProperty("anexos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AnexoNewRegistroDto> Anexos { get; set; }

        [Newtonsoft.Json.JsonProperty("idioma", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Idioma { get; set; }

        [Newtonsoft.Json.JsonProperty("oficina", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Oficina { get; set; }

        [Newtonsoft.Json.JsonProperty("asuntoId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AsuntoId { get; set; }

        [Newtonsoft.Json.JsonProperty("referenciaProcedencia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenciaProcedencia { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NewRegistroRepresentanteDto
    {

        [Newtonsoft.Json.JsonProperty("idRemitente", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdRemitente { get; set; }

        [Newtonsoft.Json.JsonProperty("idRepresentante", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdRepresentante { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AnexoNewRegistroDto
    {

        [Newtonsoft.Json.JsonProperty("tipoFormato", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AnexoNewRegistroDtoTipoFormato? TipoFormato { get; set; }

        [Newtonsoft.Json.JsonProperty("contenido", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] Contenido { get; set; }

        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        [Newtonsoft.Json.JsonProperty("descripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Descripcion { get; set; }

        [Newtonsoft.Json.JsonProperty("extension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Extension { get; set; }

        [Newtonsoft.Json.JsonProperty("tipoDocAnexo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AnexoNewRegistroDtoTipoDocAnexo? TipoDocAnexo { get; set; }

        [Newtonsoft.Json.JsonProperty("tipoValidez", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AnexoNewRegistroDtoTipoValidez? TipoValidez { get; set; }

        [Newtonsoft.Json.JsonProperty("estadoElaboracionEni", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EstadoElaboracionEni { get; set; }

        [Newtonsoft.Json.JsonProperty("tipoDocumentalEni", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TipoDocumentalEni { get; set; }

        [Newtonsoft.Json.JsonProperty("identificadorEni", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentificadorEni { get; set; }

        [Newtonsoft.Json.JsonProperty("idioma", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Idioma { get; set; }

    }

    /// <summary>
    /// Petición para añadir un nuevo asiento pendiente de registrar (Expone/Solicita para firma biométrica).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NewPendienteRegistroRequest
    {

        /// <summary>
        /// Nuevo asiento a añadir.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nuevoRegistro", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NewRegistroExponeSolicitaDto NuevoRegistro { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NewRegistroExponeSolicitaDto
    {

        [Newtonsoft.Json.JsonProperty("expone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expone { get; set; }

        [Newtonsoft.Json.JsonProperty("solicita", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Solicita { get; set; }

        [Newtonsoft.Json.JsonProperty("ejercicio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Ejercicio { get; set; }

        [Newtonsoft.Json.JsonProperty("tipo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NewRegistroExponeSolicitaDtoTipo? Tipo { get; set; }

        [Newtonsoft.Json.JsonProperty("fechaDocumento", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaDocumento { get; set; }

        [Newtonsoft.Json.JsonProperty("fechaValidezOrigen", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaValidezOrigen { get; set; }

        [Newtonsoft.Json.JsonProperty("idsRemitentes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> IdsRemitentes { get; set; }

        [Newtonsoft.Json.JsonProperty("idsRepresentantes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<NewRegistroRepresentanteDto> IdsRepresentantes { get; set; }

        [Newtonsoft.Json.JsonProperty("resumen", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Resumen { get; set; }

        [Newtonsoft.Json.JsonProperty("paisProcedencia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaisProcedencia { get; set; }

        [Newtonsoft.Json.JsonProperty("provinciaProcedencia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProvinciaProcedencia { get; set; }

        [Newtonsoft.Json.JsonProperty("municipioProcedencia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MunicipioProcedencia { get; set; }

        [Newtonsoft.Json.JsonProperty("descripcionAdicionalProcedencia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DescripcionAdicionalProcedencia { get; set; }

        [Newtonsoft.Json.JsonProperty("numeroFactura", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NumeroFactura { get; set; }

        [Newtonsoft.Json.JsonProperty("importeFactura", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ImporteFactura { get; set; }

        [Newtonsoft.Json.JsonProperty("observacionesRegistro", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ObservacionesRegistro { get; set; }

        [Newtonsoft.Json.JsonProperty("destinos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> Destinos { get; set; }

        [Newtonsoft.Json.JsonProperty("dir3Destinos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Dir3Destinos { get; set; }

        [Newtonsoft.Json.JsonProperty("anexos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AnexoNewRegistroDto> Anexos { get; set; }

        [Newtonsoft.Json.JsonProperty("idioma", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Idioma { get; set; }

        [Newtonsoft.Json.JsonProperty("oficina", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Oficina { get; set; }

        [Newtonsoft.Json.JsonProperty("asuntoId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AsuntoId { get; set; }

        [Newtonsoft.Json.JsonProperty("referenciaProcedencia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReferenciaProcedencia { get; set; }

    }

    /// <summary>
    /// Petición para añadir nuevos anexos a un registro existente.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NewAnexosRequest
    {

        /// <summary>
        /// Identificador único del registro al que se añadirán los anexos.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("registroId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RegistroId { get; set; }

        /// <summary>
        /// Nuevos anexos a añadir.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nuevosAnexos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AnexoNewRegistroDto> NuevosAnexos { get; set; }

        /// <summary>
        /// Idioma del anexo.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idioma", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Idioma { get; set; }

        /// <summary>
        /// Indica si los anexos no se deben sellar (PDFs).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("noSellar", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NoSellar { get; set; }

    }

    /// <summary>
    /// Petición para generar un justificante de un asiento creado.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JustificanteRequest
    {

        /// <summary>
        /// Número de registro.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numRegistro", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumRegistro { get; set; }

        /// <summary>
        /// Ejercicio.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ejercicio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Ejercicio { get; set; }

        /// <summary>
        /// Tipo de registro (Entrada o Salida).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tipo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public JustificanteRequestTipo? Tipo { get; set; }

        /// <summary>
        /// Código ISO del idioma del justificante.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idioma", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Idioma { get; set; }

    }

    /// <summary>
    /// Petición para generar justificante de un registro pendiente de registro.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JustificantePendienteRequest
    {

        /// <summary>
        /// Identificador del registro.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idRegistro", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdRegistro { get; set; }

        /// <summary>
        /// Código ISO del idioma del justificante.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idioma", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Idioma { get; set; }

        /// <summary>
        /// Procedencia de los datos del remitente.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("procedenciaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcedenciaId { get; set; }

    }

    /// <summary>
    /// Petición para generar el PDF del libro oficial de registros de un ejercicio.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LibroOficialRequest
    {

        /// <summary>
        /// Ejercicio del que se obtendrán los registros.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ejercicio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ejercicio { get; set; }

        /// <summary>
        /// Título del libro.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("titulo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Titulo { get; set; }

        /// <summary>
        /// Tipo de registro (Entrada o Salida).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tipo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LibroOficialRequestTipo? Tipo { get; set; }

    }

    /// <summary>
    /// Petición para habilitar o deshabilitar un asunto.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HabilitarAsuntoRequest
    {

        /// <summary>
        /// Indica si el asunto debe habilitarse (True) o deshabilitarse (False).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("habilitar", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Habilitar { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AsuntoHabilitadoDto
    {

        [Newtonsoft.Json.JsonProperty("habilitado", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Habilitado { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("descripcion", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(250)]
        public string Descripcion { get; set; }

        [Newtonsoft.Json.JsonProperty("entrada", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Entrada { get; set; }

        [Newtonsoft.Json.JsonProperty("salida", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Salida { get; set; }

        [Newtonsoft.Json.JsonProperty("contenedorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ContenedorId { get; set; }

        [Newtonsoft.Json.JsonProperty("datosEntidadId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DatosEntidadId { get; set; }

        [Newtonsoft.Json.JsonProperty("abreviatura", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Abreviatura { get; set; }

        [Newtonsoft.Json.JsonProperty("presencial", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Presencial { get; set; }

        [Newtonsoft.Json.JsonProperty("telematico", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Telematico { get; set; }

    }

    /// <summary>
    /// Petición para modificar las propiedades de un asunto.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ModificaAsuntoRequest
    {

        /// <summary>
        /// Indica si el asunto es de entrada.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entrada", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Entrada { get; set; }

        /// <summary>
        /// Indica si el asunto es de salida.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salida", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Salida { get; set; }

        /// <summary>
        /// Indica si el asunto es presencial.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("presencial", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Presencial { get; set; }

        /// <summary>
        /// Indica si el asunto es telemático.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("telematico", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Telematico { get; set; }

        /// <summary>
        /// Abreviatura del asunto.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("abreviatura", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Abreviatura { get; set; }

        /// <summary>
        /// Descripción del asunto.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("descripcion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Descripcion { get; set; }

    }

    /// <summary>
    /// Petición para asignar un número a un asiento pendiente de registro.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AsignarNumeroRequest
    {

        /// <summary>
        /// Identificador del registro al que se le asignará número de registro.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idRegistro", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdRegistro { get; set; }

        /// <summary>
        /// Número de asiento que se desea asignar.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numeroAsiento", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumeroAsiento { get; set; }

        /// <summary>
        /// Indica si se deben sellar los anexos de la entrada.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sellarAnexos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SellarAnexos { get; set; }

        /// <summary>
        /// Fecha de grabación en la que se asignó realmente el número de asiento.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fechaGrabacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FechaGrabacion { get; set; }

        /// <summary>
        /// Valida que el número de asiento sea correlativo al anterior existente del mismo ejercicio.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validarCorrelativos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ValidarCorrelativos { get; set; }

        /// <summary>
        /// Valida que la fecha de grabación del asiento sea del mismo ejercicio que el ejercicio indicado en el asiento.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validarFechaGrabacion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ValidarFechaGrabacion { get; set; }

    }

    /// <summary>
    /// Petición para cambiar el estado de pendiente de firma de un asiento.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PendienteFirmaRequest
    {

        /// <summary>
        /// Indica si el asiento debe estar pendiente de firma o no.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pendienteDeFirma", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PendienteDeFirma { get; set; }

    }

    /// <summary>
    /// Petición para marcar como leído un registro de entrada.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LeidoRequest
    {

        /// <summary>
        /// Observaciones para el histórico del cambio.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("observaciones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Observaciones { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RespuestaEstadisticas
    {

        [Newtonsoft.Json.JsonProperty("resultado", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Resultado { get; set; }

        [Newtonsoft.Json.JsonProperty("mensaje", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mensaje { get; set; }

        [Newtonsoft.Json.JsonProperty("datasets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ChartJsDataSet> Datasets { get; set; }

        [Newtonsoft.Json.JsonProperty("labels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Labels { get; set; }

        [Newtonsoft.Json.JsonProperty("xLabels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> XLabels { get; set; }

        [Newtonsoft.Json.JsonProperty("yLabels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> YLabels { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChartJsDataSet
    {

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("fill", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Fill { get; set; }

        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        [Newtonsoft.Json.JsonProperty("borderColor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BorderColor { get; set; }

        [Newtonsoft.Json.JsonProperty("pointBackgroundColor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PointBackgroundColor { get; set; }

        [Newtonsoft.Json.JsonProperty("pointStyle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PointStyle { get; set; }

        [Newtonsoft.Json.JsonProperty("pointBorderColor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PointBorderColor { get; set; }

        [Newtonsoft.Json.JsonProperty("contenedor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Contenedor { get; set; }

        [Newtonsoft.Json.JsonProperty("tipoRecuento", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TipoRecuento { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RespuestaIaDto
    {

        [Newtonsoft.Json.JsonProperty("mensajeError", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MensajeError { get; set; }

        [Newtonsoft.Json.JsonProperty("destino", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Destino { get; set; }

        [Newtonsoft.Json.JsonProperty("resumen", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Resumen { get; set; }

        [Newtonsoft.Json.JsonProperty("tipoIaEntidad", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RespuestaIaDtoTipoIaEntidad? TipoIaEntidad { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RespostaRegistre
    {

        [Newtonsoft.Json.JsonProperty("resultat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Resultat { get; set; }

        [Newtonsoft.Json.JsonProperty("idTransaccio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdTransaccio { get; set; }

        /// <summary>
        /// tipus : Tipus d’assentament generat:
        /// <br/>E: Assentament d 'entrada.
        /// <br/>S: Assentament de sortida.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tipus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tipus { get; set; }

        [Newtonsoft.Json.JsonProperty("numeroAssentament", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NumeroAssentament { get; set; }

        /// <summary>
        /// dd/MM/YYYY’T’HH:mm:ss.SSSZZZZZ - 16/06/2021T18:39:14.729+02:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dataAssentament", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DataAssentament { get; set; }

        /// <summary>
        /// dd/MM/YYYY’T’HH:mm:ss.SSSZZZZZ - 01/12/2020T12:20:03.023+01:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dataPresentacio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DataPresentacio { get; set; }

        [Newtonsoft.Json.JsonProperty("codiError", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CodiError { get; set; }

        [Newtonsoft.Json.JsonProperty("missatgeError", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MissatgeError { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TipoPersonalidad
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SinDocumento")]
        SinDocumento = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FisicaNIF")]
        FisicaNIF = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"JuridicaCIF")]
        JuridicaCIF = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ExtranjeroNIE")]
        ExtranjeroNIE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Pasaporte")]
        Pasaporte = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"DocumentoEuropeo")]
        DocumentoEuropeo = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Otros")]
        Otros = 6,

    }

    /// <summary>
    /// Tipo de elemento a eliminar (Domicilio (1), Telefono (2), Correo electrónico (3), DEH (4)).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TipoElemento
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Domicilio")]
        Domicilio = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Telefono")]
        Telefono = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CorreoElectronico")]
        CorreoElectronico = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DEH")]
        DEH = 3,

    }

    /// <summary>
    /// Tipo de elemento a eliminar (Domicilio (1), Telefono (2), Correo electrónico (3), DEH (4)).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TipoElemento2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Domicilio")]
        Domicilio = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Telefono")]
        Telefono = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CorreoElectronico")]
        CorreoElectronico = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DEH")]
        DEH = 3,

    }

    /// <summary>
    /// Tipo de registro (Entrada o Salida)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Tipo
    {

        [System.Runtime.Serialization.EnumMember(Value = @"E")]
        E = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 1,

    }

    /// <summary>
    /// Tipo de asunto (Entrada o Salida)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Tipo2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"E")]
        E = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Tipo3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"E")]
        E = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Tipo4
    {

        [System.Runtime.Serialization.EnumMember(Value = @"E")]
        E = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CiudadanoEditViewModelPersonalidad
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SinDocumento")]
        SinDocumento = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FisicaNIF")]
        FisicaNIF = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"JuridicaCIF")]
        JuridicaCIF = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ExtranjeroNIE")]
        ExtranjeroNIE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Pasaporte")]
        Pasaporte = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"DocumentoEuropeo")]
        DocumentoEuropeo = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Otros")]
        Otros = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TelefonoEditViewModelTipo
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Fijo")]
        Fijo = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Movil")]
        Movil = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Fax")]
        Fax = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Trabajo")]
        Trabajo = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FamiliarAmigo")]
        FamiliarAmigo = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Internacional")]
        Internacional = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ProcedenteSir")]
        ProcedenteSir = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CiudadanoViewModelPersonalidad
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SinDocumento")]
        SinDocumento = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FisicaNIF")]
        FisicaNIF = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"JuridicaCIF")]
        JuridicaCIF = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ExtranjeroNIE")]
        ExtranjeroNIE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Pasaporte")]
        Pasaporte = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"DocumentoEuropeo")]
        DocumentoEuropeo = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Otros")]
        Otros = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ContactosCompletosCiudadanoDtoPersonalidad
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SinDocumento")]
        SinDocumento = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FisicaNIF")]
        FisicaNIF = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"JuridicaCIF")]
        JuridicaCIF = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ExtranjeroNIE")]
        ExtranjeroNIE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Pasaporte")]
        Pasaporte = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"DocumentoEuropeo")]
        DocumentoEuropeo = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Otros")]
        Otros = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TelefonoDtoTipo
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Fijo")]
        Fijo = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Movil")]
        Movil = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Fax")]
        Fax = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Trabajo")]
        Trabajo = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FamiliarAmigo")]
        FamiliarAmigo = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Internacional")]
        Internacional = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ProcedenteSir")]
        ProcedenteSir = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CiudadanoDtoPersonalidad
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SinDocumento")]
        SinDocumento = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FisicaNIF")]
        FisicaNIF = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"JuridicaCIF")]
        JuridicaCIF = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ExtranjeroNIE")]
        ExtranjeroNIE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Pasaporte")]
        Pasaporte = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"DocumentoEuropeo")]
        DocumentoEuropeo = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Otros")]
        Otros = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum NewCiudadanoDtoPersonalidad
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SinDocumento")]
        SinDocumento = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FisicaNIF")]
        FisicaNIF = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"JuridicaCIF")]
        JuridicaCIF = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ExtranjeroNIE")]
        ExtranjeroNIE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Pasaporte")]
        Pasaporte = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"DocumentoEuropeo")]
        DocumentoEuropeo = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Otros")]
        Otros = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CiudadanoEditDtoPersonalidad
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SinDocumento")]
        SinDocumento = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FisicaNIF")]
        FisicaNIF = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"JuridicaCIF")]
        JuridicaCIF = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ExtranjeroNIE")]
        ExtranjeroNIE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Pasaporte")]
        Pasaporte = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"DocumentoEuropeo")]
        DocumentoEuropeo = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Otros")]
        Otros = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TelefonoEditDtoTipo
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Fijo")]
        Fijo = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Movil")]
        Movil = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Fax")]
        Fax = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Trabajo")]
        Trabajo = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FamiliarAmigo")]
        FamiliarAmigo = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Internacional")]
        Internacional = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ProcedenteSir")]
        ProcedenteSir = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CambioPersonalidadDtoPersonalidad
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SinDocumento")]
        SinDocumento = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FisicaNIF")]
        FisicaNIF = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"JuridicaCIF")]
        JuridicaCIF = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ExtranjeroNIE")]
        ExtranjeroNIE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Pasaporte")]
        Pasaporte = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"DocumentoEuropeo")]
        DocumentoEuropeo = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Otros")]
        Otros = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EntradaViewModelTipo
    {

        [System.Runtime.Serialization.EnumMember(Value = @"E")]
        E = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EntradaViewModelProcedenciaRegistro
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SinValor")]
        SinValor = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Presencial")]
        Presencial = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SIR")]
        SIR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Seria")]
        Seria = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Senia")]
        Senia = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"WS")]
        WS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Notificacion")]
        Notificacion = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Tramite")]
        Tramite = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"AntiguoSeres")]
        AntiguoSeres = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Mux")]
        Mux = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Asistido")]
        Asistido = 10,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EntradaViewModelMedioEnvio
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SIR")]
        SIR = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Seria")]
        Seria = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SinValor")]
        SinValor = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Postal")]
        Postal = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EntradaViewModelResultadoEnvio
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SinValor")]
        SinValor = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Ok")]
        Ok = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"EnviadaAnteriormente")]
        EnviadaAnteriormente = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EntradaViewModelNotificacion
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SinValor")]
        SinValor = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Aviso")]
        Aviso = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ComunicacionElectronica")]
        ComunicacionElectronica = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NotificacionElectronica")]
        NotificacionElectronica = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Papel")]
        Papel = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Edicto")]
        Edicto = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Senia")]
        Senia = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Sir")]
        Sir = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EntradaViewModelTipoFirma
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SinValorSinFirmar")]
        SinValorSinFirmar = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Biometrica")]
        Biometrica = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Manual")]
        Manual = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Automatico")]
        Automatico = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Presencial")]
        Presencial = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ServicioWeb")]
        ServicioWeb = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Libreria")]
        Libreria = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RegistroOldViewModelTipo
    {

        [System.Runtime.Serialization.EnumMember(Value = @"E")]
        E = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RegistroOldViewModelProcedenciaRegistro
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SinValor")]
        SinValor = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Presencial")]
        Presencial = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SIR")]
        SIR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Seria")]
        Seria = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Senia")]
        Senia = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"WS")]
        WS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Notificacion")]
        Notificacion = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Tramite")]
        Tramite = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"AntiguoSeres")]
        AntiguoSeres = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Mux")]
        Mux = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Asistido")]
        Asistido = 10,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RegistroOldViewModelMedioEnvio
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SIR")]
        SIR = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Seria")]
        Seria = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SinValor")]
        SinValor = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Postal")]
        Postal = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RegistroOldViewModelResultadoEnvio
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SinValor")]
        SinValor = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Ok")]
        Ok = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"EnviadaAnteriormente")]
        EnviadaAnteriormente = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RegistroOldViewModelNotificacion
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SinValor")]
        SinValor = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Aviso")]
        Aviso = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ComunicacionElectronica")]
        ComunicacionElectronica = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NotificacionElectronica")]
        NotificacionElectronica = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Papel")]
        Papel = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Edicto")]
        Edicto = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Senia")]
        Senia = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Sir")]
        Sir = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RegistroOldViewModelTipoFirma
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SinValorSinFirmar")]
        SinValorSinFirmar = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Biometrica")]
        Biometrica = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Manual")]
        Manual = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Automatico")]
        Automatico = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Presencial")]
        Presencial = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ServicioWeb")]
        ServicioWeb = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Libreria")]
        Libreria = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RemiteDestinoViewModelCanalContacto
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Ninguno")]
        Ninguno = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DirPostal")]
        DirPostal = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DirElectronica")]
        DirElectronica = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ComparecenciaElectronica")]
        ComparecenciaElectronica = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AnexoViewModelEstadoDescarga
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NoAplica")]
        NoAplica = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Pendiente")]
        Pendiente = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Descargado")]
        Descargado = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EstadoIntercambioSirTipoCodigo
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PE")]
        PE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PRAE")]
        PRAE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PRC")]
        PRC = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"R")]
        R = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"RC")]
        RC = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PERCH")]
        PERCH = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PRAERCH")]
        PRAERCH = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"RRCH")]
        RRCH = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"PRE")]
        PRE = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"PRARE")]
        PRARE = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"RRE")]
        RRE = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"EC")]
        EC = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"ERCH")]
        ERCH = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"EERR")]
        EERR = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"REERR")]
        REERR = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"RCHERR")]
        RCHERR = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"SinEstado")]
        SinEstado = 16,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RemiteDestinoRepresentanteViewModelCanalContacto
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Ninguno")]
        Ninguno = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DirPostal")]
        DirPostal = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DirElectronica")]
        DirElectronica = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ComparecenciaElectronica")]
        ComparecenciaElectronica = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RemiteDestinoCanalContacto
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Ninguno")]
        Ninguno = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DirPostal")]
        DirPostal = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DirElectronica")]
        DirElectronica = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ComparecenciaElectronica")]
        ComparecenciaElectronica = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IRemiteDestinoCanalContacto
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Ninguno")]
        Ninguno = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DirPostal")]
        DirPostal = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DirElectronica")]
        DirElectronica = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ComparecenciaElectronica")]
        ComparecenciaElectronica = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RemiteDestinoRepresentanteCanalContacto
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Ninguno")]
        Ninguno = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DirPostal")]
        DirPostal = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DirElectronica")]
        DirElectronica = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ComparecenciaElectronica")]
        ComparecenciaElectronica = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CiudadanoPersonalidad
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SinDocumento")]
        SinDocumento = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FisicaNIF")]
        FisicaNIF = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"JuridicaCIF")]
        JuridicaCIF = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ExtranjeroNIE")]
        ExtranjeroNIE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Pasaporte")]
        Pasaporte = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"DocumentoEuropeo")]
        DocumentoEuropeo = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Otros")]
        Otros = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TelefonoTipo
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Fijo")]
        Fijo = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Movil")]
        Movil = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Fax")]
        Fax = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Trabajo")]
        Trabajo = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FamiliarAmigo")]
        FamiliarAmigo = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Internacional")]
        Internacional = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ProcedenteSir")]
        ProcedenteSir = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SalidaViewModelTipo
    {

        [System.Runtime.Serialization.EnumMember(Value = @"E")]
        E = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SalidaViewModelProcedenciaRegistro
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SinValor")]
        SinValor = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Presencial")]
        Presencial = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SIR")]
        SIR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Seria")]
        Seria = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Senia")]
        Senia = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"WS")]
        WS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Notificacion")]
        Notificacion = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Tramite")]
        Tramite = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"AntiguoSeres")]
        AntiguoSeres = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Mux")]
        Mux = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Asistido")]
        Asistido = 10,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SalidaViewModelMedioEnvio
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SIR")]
        SIR = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Seria")]
        Seria = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SinValor")]
        SinValor = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Postal")]
        Postal = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SalidaViewModelResultadoEnvio
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SinValor")]
        SinValor = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Ok")]
        Ok = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"EnviadaAnteriormente")]
        EnviadaAnteriormente = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SalidaViewModelNotificacion
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SinValor")]
        SinValor = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Aviso")]
        Aviso = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ComunicacionElectronica")]
        ComunicacionElectronica = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NotificacionElectronica")]
        NotificacionElectronica = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Papel")]
        Papel = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Edicto")]
        Edicto = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Senia")]
        Senia = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Sir")]
        Sir = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SalidaViewModelTipoFirma
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SinValorSinFirmar")]
        SinValorSinFirmar = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Biometrica")]
        Biometrica = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Manual")]
        Manual = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Automatico")]
        Automatico = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Presencial")]
        Presencial = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ServicioWeb")]
        ServicioWeb = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Libreria")]
        Libreria = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EntradaSalidaViewModelTipo
    {

        [System.Runtime.Serialization.EnumMember(Value = @"E")]
        E = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EntradaSalidaViewModelProcedenciaRegistro
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SinValor")]
        SinValor = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Presencial")]
        Presencial = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SIR")]
        SIR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Seria")]
        Seria = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Senia")]
        Senia = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"WS")]
        WS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Notificacion")]
        Notificacion = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Tramite")]
        Tramite = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"AntiguoSeres")]
        AntiguoSeres = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Mux")]
        Mux = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Asistido")]
        Asistido = 10,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EntradaSalidaViewModelMedioEnvio
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SIR")]
        SIR = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Seria")]
        Seria = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SinValor")]
        SinValor = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Postal")]
        Postal = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EntradaSalidaViewModelResultadoEnvio
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SinValor")]
        SinValor = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Ok")]
        Ok = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"EnviadaAnteriormente")]
        EnviadaAnteriormente = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EntradaSalidaViewModelNotificacion
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SinValor")]
        SinValor = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Aviso")]
        Aviso = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ComunicacionElectronica")]
        ComunicacionElectronica = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NotificacionElectronica")]
        NotificacionElectronica = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Papel")]
        Papel = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Edicto")]
        Edicto = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Senia")]
        Senia = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Sir")]
        Sir = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EntradaSalidaViewModelTipoFirma
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SinValorSinFirmar")]
        SinValorSinFirmar = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Biometrica")]
        Biometrica = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Manual")]
        Manual = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Automatico")]
        Automatico = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Presencial")]
        Presencial = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ServicioWeb")]
        ServicioWeb = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Libreria")]
        Libreria = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GetContenidoAnexoResponseTipoRuta
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Url")]
        Url = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Disco")]
        Disco = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Csv")]
        Csv = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FiltroRegistroDtoTipo
    {

        [System.Runtime.Serialization.EnumMember(Value = @"E")]
        E = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FiltroRegistroDtoEstado
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Incompleto")]
        Incompleto = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Completo")]
        Completo = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FiltroRegistroDtoTipoNotificacion
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SinValor")]
        SinValor = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Aviso")]
        Aviso = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ComunicacionElectronica")]
        ComunicacionElectronica = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NotificacionElectronica")]
        NotificacionElectronica = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Papel")]
        Papel = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Edicto")]
        Edicto = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Senia")]
        Senia = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Sir")]
        Sir = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum NewRegistroDtoTipo
    {

        [System.Runtime.Serialization.EnumMember(Value = @"E")]
        E = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AnexoNewRegistroDtoTipoFormato
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Url")]
        Url = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Contenido")]
        Contenido = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AnexoNewRegistroDtoTipoDocAnexo
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Formulario")]
        Formulario = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Adjunto")]
        Adjunto = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FicheroTecnico")]
        FicheroTecnico = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AnexoNewRegistroDtoTipoValidez
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SinValidez")]
        SinValidez = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Compulsada")]
        Compulsada = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Autentica")]
        Autentica = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Original")]
        Original = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum NewRegistroExponeSolicitaDtoTipo
    {

        [System.Runtime.Serialization.EnumMember(Value = @"E")]
        E = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum JustificanteRequestTipo
    {

        [System.Runtime.Serialization.EnumMember(Value = @"E")]
        E = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LibroOficialRequestTipo
    {

        [System.Runtime.Serialization.EnumMember(Value = @"E")]
        E = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RespuestaIaDtoTipoIaEntidad
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Desactivado")]
        Desactivado = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OpenAI")]
        OpenAI = 1,

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 108
#pragma warning restore 114
#pragma warning restore 472
#pragma warning restore 612
#pragma warning restore 649
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8600
#pragma warning restore 8602
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625
#pragma warning restore 8765